import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
import uuid
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from pydantic import BaseModel, ValidationError  # –î–æ–±–∞–≤–ª–µ–Ω Pydantic

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_CHAT_ID")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
ERROR_UNKNOWN_COMMAND = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
PERIOD_INPUT_INSTRUCTIONS = (
    "üóì –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (YYYY-MM-DD,YYYY-MM-DD)\n"
    "–ü—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
    "–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è."
)
BACK_BUTTON_TEXT = "–ù–∞–∑–∞–¥"
MAIN_MENU_TEXT = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def get_main_menu():
    return MAIN_MENU

# ------------------------------
# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç —á–µ—Ä–µ–∑ Pydantic
# ------------------------------
class Period(BaseModel):
    start: str
    end: str

# ------------------------------
# Webhook (Telegram + Postback)
# ------------------------------
@app.get("/webhook")
async def verify_webhook():
    return {"status": "ok"}

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        if "update_id" in data:
            update = Update.de_json(data, telegram_app.bot)
            await telegram_app.process_update(update)
        else:
            await process_postback_data(data)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error"}, 500

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
# ------------------------------
async def init_telegram_app():
    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
# ------------------------------
async def try_delete_message(update):
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# ------------------------------
# Postback (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)
# ------------------------------
async def process_postback_data(data: dict):
    logger.debug(f"Postback data: {data}")
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–≥–∏)
    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML"
        )
        logger.debug("Postback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ postback")
        return {"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await try_delete_message(update)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

# ------------------------------
# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /common (group_by=day)
# ------------------------------
async def get_common_data_aggregated(date_from: str, date_to: str):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ /common –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {date_from} - {date_to}")
        async with httpx.AsyncClient(timeout=30) as client:
            r = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code": "USD"
                }
            )
            r.raise_for_status()
    except httpx.HTTPError as e:
        return False, f"HTTP –æ—à–∏–±–∫–∞: {e}"
    data = r.json()
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ------------------------------
# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /conversions (registration, ftd, rdeposit)
# ------------------------------
async def get_rfr_aggregated(date_from: str, date_to: str):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ /conversions –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {date_from} - {date_to}")
        async with httpx.AsyncClient(timeout=30) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY},
                params=base_params
            )
            resp.raise_for_status()
    except httpx.HTTPError as e:
        return False, f"HTTP –æ—à–∏–±–∫–∞: {e}"
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ------------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
# ------------------------------
def calculate_metrics(clicks, unique, reg, ftd, rd, payout):
    return {
        "C2R": (reg / clicks * 100) if clicks else 0,
        "R2D": (ftd / reg * 100) if reg else 0,
        "C2D": (ftd / clicks * 100) if clicks else 0,
        "FD2RD": (rd / ftd * 100) if ftd else 0,
        "EPC": (payout / clicks) if clicks else 0,
        "uEPC": (payout / unique) if unique else 0,
    }

def build_metrics(metrics_dict):
    return (
        "üéØ –ú–µ—Ç—Ä–∏–∫–∏:\n\n" + 
        "\n".join(f"‚Ä¢ {k} = {v:.2f}%" for k, v in metrics_dict.items())
    )

# ------------------------------
# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π
# ------------------------------
async def show_stats_screen(query, context, date_from, date_to, label):
    async def fetch_common():
        return await get_common_data_aggregated(date_from, date_to)
    
    async def fetch_rfr():
        return await get_rfr_aggregated(date_from, date_to)
    
    try:
        common_ok, cinfo = await fetch_common()
        rfr_ok, rdata = await fetch_rfr()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        return
    
    if not common_ok or not rfr_ok:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="back_periods")]])
        await query.edit_message_text(f"‚ùó {common_ok or rfr_ok}", reply_markup=kb)
        return
    
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç (–°–≤–æ–π –ø–µ—Ä–∏–æ–¥)
# ------------------------------
async def period_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_period"):
        return
    
    await try_delete_message(update)
    
    txt = update.message.text.strip()
    logger.info(f"–í–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞: {txt}")
    
    if txt.lower() == "–Ω–∞–∑–∞–¥":
        # ... (–ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é)
    
    try:
        period = Period(**{k:v.strip() for k,v in zip(["start","end"], txt.split(","))})
    except ValidationError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD).")
        context.user_data["awaiting_period"] = False
        return
    
    st_d = datetime.strptime(period.start, "%Y-%m-%d").date()
    ed_d = datetime.strptime(period.end, "%Y-%m-%d").date()
    
    if st_d > ed_d:
        await update.message.reply_text("‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
        return
    
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞—Ç)

# ------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–µ—Ä–µ–∑ TTL
# ------------------------------
def clean_stats_store(context):
    now = datetime.now()
    to_remove = []
    for key, value in context.user_data.get("stats_store", {}).items():
        if (now - value.get("timestamp", now)).total_seconds() > 3600:
            to_remove.append(key)
    for key in to_remove:
        del context.user_data["stats_store"][key]

# ------------------------------
# Reply-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
# ------------------------------
async def reply_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    known_commands = ["üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–õ–ö –ü–ü", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    
    if text not in known_commands:
        return
    
    await try_delete_message(update)
    
    if text == "–õ–ö –ü–ü":
        link = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://cabinet.4rabetpartner.com/statistics"
        await update.message.reply_text(link, parse_mode="HTML", reply_markup=get_main_menu())
    elif text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        kb = InlineKeyboardMarkup([
            # ... (–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞)
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=get_main_menu())

# ------------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π inline_handler
# ------------------------------
async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data.startswith("update|"):
        clean_stats_store(context)  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    # ... (–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º TTL)

# ------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    asyncio.run(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
