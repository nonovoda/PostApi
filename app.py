import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx

from fastapi import FastAPI, Request
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "YOUR_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# ------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
# ------------------------------
app = FastAPI()

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_telegram_app():
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram bot started!")

# ------------------------------
# –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------------------------
async def format_common_stats(data, period_label: str) -> str:
    """
    –û—Ñ–æ—Ä–º–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (response /partner/statistic/common)
    """
    arr = data.get("data", [])
    if not arr:
        return f"‚ö†Ô∏è <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ({period_label})</i>"

    stat = arr[0]
    # –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:
    date_info = (stat.get("group_fields", [{}])[0].get("label", "")) if stat.get("group_fields") else "N/A"
    clicks = stat.get("click_count", 0)
    unique_clicks = stat.get("click_unique_count", 0)
    conversions = stat.get("conversions", {}).get("confirmed", {})
    count_conf = conversions.get("count", 0)
    payout_conf = conversions.get("payout", 0)

    msg = (
        f"<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})</b>\n\n"
        f"üóì –î–∞—Ç–∞(—ã): <i>{date_info}</i>\n"
        f"üëÅ –ö–ª–∏–∫–∏: <b>{clicks}</b> (—É–Ω–∏–∫. {unique_clicks})\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: <b>{count_conf}</b>\n"
        f"üí∞ –í—ã–ø–ª–∞—Ç—ã: <b>{payout_conf} USD</b>\n"
    )
    return msg

def format_conversions_table(conv_list) -> str:
    """
    –ö—Ä–∞—Å–∏–≤–∞—è ¬´—Ç–∞–±–ª–∏—Ü–∞¬ª –∫–æ–Ω–≤–µ—Ä—Å–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è <code>...</code> –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.
    –î–æ–±–∞–≤–∏–º —ç–º–æ–¥–∑–∏ –∏ HTML-–≤—ã–¥–µ–ª–µ–Ω–∏–µ.
    """
    if not conv_list:
        return "‚ö†Ô∏è <i>–ù–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</i>"

    header = (
        "  ID         |     GOAL      |  STATUS   | PAYOUT\n"
        "-------------+---------------+-----------+-------\n"
    )
    body = ""
    for c in conv_list:
        cid = str(c.get("conversion_id", ""))
        goal_key = c.get("goal", {}).get("key", "")
        status = c.get("status", "")
        payout = str(c.get("payout", "0"))

        # –ü–æ–¥—Ä–µ–∑–∞–µ–º/–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        cid_str = cid[:11].ljust(11)
        goal_str = goal_key[:10].ljust(10)
        stat_str = status[:9].ljust(9)
        pay_str = payout[:5].rjust(5)
        body += f"{cid_str} | {goal_str} | {stat_str} | {pay_str}\n"

    text = (
        "üéØ <b>–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</b>\n\n"
        "<code>"
        + header
        + body
        + "</code>"
    )
    return text


# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ postback (GET/POST) ‚Äì –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ
# ------------------------------
@app.api_route("/webhook", methods=["GET", "POST"])
async def webhook_handler(request: Request):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook: –ª–∏–±–æ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (POST JSON), –ª–∏–±–æ postback GET/POST
    """
    # ... –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ...
    try:
        data = await request.json()
        if "update_id" in data:
            update = Update.de_json(data, telegram_app.bot)
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
            return {"status": "ok"}
        else:
            # postback
            ...
            return {"status": "ok"}
    except:
        # –í–æ–∑–º–æ–∂–Ω–æ GET postback
        return {"status": "ok"}

# ------------------------------
# /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ö–Ω–æ–ø–∫–∏: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É / –õ–ö –ü–ü (–ø—Ä–∏–º–µ—Ä) / ... 
    kb = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")],
        [InlineKeyboardButton("üîó –õ–ö –ü–ü", callback_data="lkpp")],
        [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="exit")]
    ]
    reply_markup = InlineKeyboardMarkup(kb)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    sent = await update.message.reply_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º msg_id, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    context.user_data["main_msg_id"] = sent.message_id

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–µ–¥–∏—Ç–∏–º —Ç–æ—Ç –∂–µ –º–µ—Å—Å–µ–¥–∂)
# ------------------------------
async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "menu_stats", "lkpp", "exit", "period_today" ...
    logger.debug(f"Callback data: {data}")

    # ------------------------------------
    # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    # ------------------------------------
    if data == "menu_stats":
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        text = "üìÖ <b>–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?</b>"
        kb = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today")],
            [InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton("–ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
        ]
        markup = InlineKeyboardMarkup(kb)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=markup)
        return

    elif data == "lkpp":
        # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ‚Äì –ø—Ä–æ—Å—Ç–æ –¥–∞—ë–º —Å—Å—ã–ª–∫—É
        text = "üîó –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://cabinet.4rabetpartner.com/statistics\n\n‚¨ÖÔ∏è <i>–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...</i>"
        await query.edit_message_text(text, parse_mode="HTML")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")],
            [InlineKeyboardButton("üîó –õ–ö –ü–ü", callback_data="lkpp")],
            [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="exit")]
        ]
        await asyncio.sleep(2)
        await query.edit_message_text(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

    elif data == "exit":
        # –í—ã—Ö–æ–¥: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await query.edit_message_text("üëã <i>–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!</i>", parse_mode="HTML")
        return

    elif data == "back_mainmenu":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")],
            [InlineKeyboardButton("üîó –õ–ö –ü–ü", callback_data="lkpp")],
            [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="exit")]
        ]
        text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))
        return

    # ------------------------------------
    # –ú–ï–ù–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ‚Äì –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    # ------------------------------------
    elif data == "period_today":
        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        period_label = "–°–µ–≥–æ–¥–Ω—è"
        date_str = datetime.now().strftime("%Y-%m-%d")
        date_from = f"{date_str} 00:00"
        date_to = f"{date_str} 23:59"

        common_text, inline_kb = await get_common_stat_and_show_details_menu(
            date_from, date_to, period_label
        )
        await query.edit_message_text(common_text, parse_mode="HTML", reply_markup=inline_kb)
        return

    elif data == "period_month":
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        now = datetime.now()
        end_date = now.date()
        start_date = (end_date - timedelta(days=30))
        date_from = f"{start_date} 00:00"
        date_to = f"{end_date} 23:59"
        period_label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        common_text, inline_kb = await get_common_stat_and_show_details_menu(
            date_from, date_to, period_label
        )
        await query.edit_message_text(common_text, parse_mode="HTML", reply_markup=inline_kb)
        return

    elif data == "period_custom":
        # –ó–∞ –ø–µ—Ä–∏–æ–¥ ‚Äì –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "–æ–∂–∏–¥–∞–Ω–∏–µ" (user_data["awaiting_period"] = True), –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,
        # –∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        context.user_data["awaiting_period"] = True
        text = (
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>YYYY-MM-DD,YYYY-MM-DD</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>2025-02-01,2025-02-10</i>\n"
            "‚¨ÖÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥."
        )
        kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_stats")]]
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))
        return

    elif data.startswith("back_to_stats|"):
        # –ù–∞–ø—Ä–∏–º–µ—Ä: "back_to_stats|2025-01-01 00:00|2025-01-05 23:59|–ú–æ–π –ø–µ—Ä–∏–æ–¥"
        parts = data.split("|")
        date_from = parts[1]
        date_to = parts[2]
        period_label = parts[3]
        # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        common_text, inline_kb = await get_common_stat_and_show_details_menu(
            date_from, date_to, period_label
        )
        await query.edit_message_text(common_text, parse_mode="HTML", reply_markup=inline_kb)
        return

    # ------------------------------------
    # –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø ‚Äì –ø–µ—Ä–≤—ã–π —à–∞–≥: –≤—ã–±–æ—Ä —Ü–µ–ª–∏
    # ------------------------------------
    elif data.startswith("details_first|"):
        # "details_first|2025-01-01 00:00|2025-01-10 23:59|–ú–æ–π –ø–µ—Ä–∏–æ–¥"
        parts = data.split("|")
        date_from = parts[1]
        date_to = parts[2]
        label = parts[3]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ü–µ–ª–µ–π
        text = (
            f"üîé <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {label}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (goal):"
        )
        kb = [
            [
                InlineKeyboardButton("Registration", callback_data=f"details_goal|registration|{date_from}|{date_to}|{label}"),
                InlineKeyboardButton("FTD", callback_data=f"details_goal|ftd|{date_from}|{date_to}|{label}")
            ],
            [
                InlineKeyboardButton("Bets", callback_data=f"details_goal|bet|{date_from}|{date_to}|{label}"),
                InlineKeyboardButton("RDS", callback_data=f"details_goal|rdeposit|{date_from}|{date_to}|{label}")
            ],
            [
                InlineKeyboardButton("–í—Å–µ —Ü–µ–ª–∏", callback_data=f"details_goal|all|{date_from}|{date_to}|{label}")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_stats|{date_from}|{date_to}|{label}")
            ]
        ]
        await query.edit_message_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

    # ------------------------------------
    # –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø ‚Äì –≤—Ç–æ—Ä–æ–π —à–∞–≥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    # ------------------------------------
    elif data.startswith("details_goal|"):
        # "details_goal|registration|2025-01-01 00:00|2025-01-10 23:59|–ú–æ–π –ø–µ—Ä–∏–æ–¥"
        parts = data.split("|")
        gkey = parts[1]
        date_from = parts[2]
        date_to = parts[3]
        label = parts[4]

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        base_params = [
            ("timezone", "Europe/Moscow"),
            ("date_from", date_from),
            ("date_to", date_to),
            ("per_page", "100"),
        ]

        if gkey == "all":
            # goals = ["registration","ftd","bet","rdeposit"]
            for x in ["registration","ftd","bet","rdeposit"]:
                base_params.append(("goal_keys[]", x))
        else:
            base_params.append(("goal_keys[]", gkey))

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(
                    f"{BASE_API_URL}/partner/statistic/conversions",
                    headers={"API-KEY": API_KEY, "Content-Type": "application/json"},
                    params=base_params
                )
            if resp.status_code == 200:
                data_json = resp.json()
                conv_list = data_json.get("data", [])
                # –í–æ–∑—å–º—ë–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–µ 50
                conv_list = conv_list[:50]
                text_table = format_conversions_table(conv_list)
                text_head = f"üîé <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {gkey if gkey!='all' else '–≤—Å–µ —Ü–µ–ª–∏'} ({label})</b>\n\n"
                final_text = text_head + text_table
            else:
                final_text = f"–û—à–∏–±–∫–∞ API {resp.status_code}: {resp.text}"
        except Exception as e:
            final_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏
        kb = [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"details_first|{date_from}|{date_to}|{label}")
            ]
        ]
        await query.edit_message_text(final_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))
        return

    # ------------------------------------
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–æ–ø–∏—Å–∞–Ω–Ω–æ–µ
    # ------------------------------------
    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML")


# ------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------
async def get_common_stat_and_show_details_menu(date_from, date_to, label: str):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /partner/statistic/common, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è" (–ø–µ—Ä–≤—ã–π —à–∞–≥).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (text, inline_markup).
    """
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY, "Content-Type": "application/json"},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code": "USD"
                }
            )
        if resp.status_code == 200:
            data = resp.json()
            common_txt = await format_common_stats(data, label)
        else:
            common_txt = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {resp.status_code}: {resp.text}"
    except Exception as e:
        common_txt = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
    # callback_data: "details_first|date_from|date_to|label"
    kb = [
        [
            InlineKeyboardButton("üîé –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data=f"details_first|{date_from}|{date_to}|{label}")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_stats")
        ]
    ]
    return common_txt, InlineKeyboardMarkup(kb)


# ------------------------------
# Handler –¥–ª—è user input (–∫–æ–≥–¥–∞ –≤–≤–æ–¥—è—Ç –¥–∞—Ç—ã)
# ------------------------------
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_period"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—ã
        text = update.message.text
        # –°—Ç–∏—Ä–∞–µ–º —Ñ–ª–∞–≥
        context.user_data["awaiting_period"] = False

        await update.message.delete()  # —É–¥–∞–ª–∏–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        parts = text.split(",")
        if len(parts) != 2:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["main_msg_id"],
                text="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                parse_mode="HTML"
            )
            return

        try:
            start_date = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
            end_date = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        except:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["main_msg_id"],
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç. –§–æ—Ä–º–∞—Ç: YYYY-MM-DD,YYYY-MM-DD",
                parse_mode="HTML"
            )
            return

        if start_date > end_date:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["main_msg_id"],
                text="‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π!",
                parse_mode="HTML"
            )
            return

        date_from = f"{start_date} 00:00"
        date_to = f"{end_date} 23:59"
        label = f"{start_date} - {end_date}"
        # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        text_stats, kb = await get_common_stat_and_show_details_menu(date_from, date_to, label)
        await context.bot.edit_message_text(
            text=text_stats,
            parse_mode="HTML",
            chat_id=update.effective_chat.id,
            message_id=context.user_data["main_msg_id"],
            reply_markup=kb
        )
    else:
        # –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ (–Ω–µ –≤–≤–æ–¥ –¥–∞—Ç) ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CallbackQueryHandler(inline_handler))
# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç—ã) ‚Äì —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

# ------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
