import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
import uuid
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from pydantic import BaseModel, ValidationError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_CHAT_ID")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
ERROR_UNKNOWN_COMMAND = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
PERIOD_INPUT_INSTRUCTIONS = (
    "üóì –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (YYYY-MM-DD,YYYY-MM-DD)\n"
    "–ü—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
    "–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è."
)
BACK_BUTTON_TEXT = "–ù–∞–∑–∞–¥"
MAIN_MENU_TEXT = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def get_main_menu():
    return MAIN_MENU

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç —á–µ—Ä–µ–∑ Pydantic
class Period(BaseModel):
    start: str
    end: str

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def try_delete_message(update):
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
async def init_telegram_app():
    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.get("/webhook")
async def verify_webhook():
    return {"status": "ok"}

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        if "update_id" in data:
            update = Update.de_json(data, telegram_app.bot)
            await telegram_app.process_update(update)
        else:
            await process_postback_data(data)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error"}, 500

# Postback (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)
async def process_postback_data(data: dict):
    logger.debug(f"Postback data: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id3 = data.get("sub_id3", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", data.get("currency", "USD"))
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    cdate = data.get("conversion_date", "N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id3}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{cdate}</i>"
    )

    if not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return {"error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID"}, 500

    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML"
        )
        logger.debug("Postback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ postback")
        return {"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

# /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await try_delete_message(update)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /common (group_by=day)
async def get_common_data_aggregated(date_from: str, date_to: str):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ /common –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {date_from} - {date_to}")
        async with httpx.AsyncClient(timeout=30) as client:
            r = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code": "USD"
                }
            )
            r.raise_for_status()
    except httpx.HTTPError as e:
        return False, f"HTTP –æ—à–∏–±–∫–∞: {e}"
    data = r.json()
    arr = data.get("data", [])
    if not arr:
        return True, {
            "click_count": 0,
            "click_unique": 0,
            "conf_count": 0,
            "conf_payout": 0.0
        }
    s_click, s_unique, s_conf, s_pay = 0, 0, 0, 0.0
    for item in arr:
        s_click += item.get("click_count", 0)
        s_unique += item.get("click_unique_count", 0)
        c_ = item.get("conversions", {}).get("confirmed", {})
        s_conf += c_.get("count", 0)
        s_pay += c_.get("payout", 0.0)
    return True, {
        "click_count": s_click,
        "click_unique": s_unique,
        "conf_count": s_conf,
        "conf_payout": s_pay
    }

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /conversions (registration, ftd, rdeposit)
async def get_rfr_aggregated(date_from: str, date_to: str):
    base_params = [
        ("timezone", "Europe/Moscow"),
        ("date_from", date_from),
        ("date_to", date_to),
        ("per_page", "500"),
        ("group_by", "day")
    ]
    for g in ["registration", "ftd", "rdeposit"]:
        base_params.append(("goal_keys[]", g))
    
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ /conversions –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {date_from} - {date_to}")
        async with httpx.AsyncClient(timeout=30) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY},
                params=dict(base_params)
            )
            resp.raise_for_status()
    except httpx.HTTPError as e:
        return False, f"HTTP –æ—à–∏–±–∫–∞: {e}"
    data = resp.json()
    arr = data.get("data", [])
    out = {"registration": 0, "ftd": 0, "rdeposit": 0}
    for c in arr:
        g = c.get("goal", {}).get("key")
        if g in out:
            out[g] += 1
    return True, out

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
def calculate_metrics(clicks, unique, reg, ftd, rd, payout):
    return {
        "C2R": (reg / clicks * 100) if clicks else 0,
        "R2D": (ftd / reg * 100) if reg else 0,
        "C2D": (ftd / clicks * 100) if clicks else 0,
        "FD2RD": (rd / ftd * 100) if ftd else 0,
        "EPC": (payout / clicks) if clicks else 0,
        "uEPC": (payout / unique) if unique else 0,
    }

def build_stats_text(label, date_label, clicks, unique, reg, ftd, rd, conf_count, conf_payout):
    return (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ({label})\n\n"
        f"üóì <b>–ü–µ—Ä–∏–æ–¥:</b> <i>{date_label}</i>\n\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> <i>{clicks}</i> (—É–Ω–∏–∫: {unique})\n"
        f"üÜï <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <i>{reg}</i>\n"
        f"üíµ <b>FTD:</b> <i>{ftd}</i>\n"
        f"üîÑ <b>RD:</b> <i>{rd}</i>\n\n"
        f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conf_count}</i>\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> <i>{conf_payout:.2f} USD</i>\n"
    )

def build_metrics_text(metrics_dict):
    return (
        "üéØ <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n\n" + 
        "\n".join(f"‚Ä¢ <b>{k}</b> = {v:.2f}%" for k, v in metrics_dict.items())
    )

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_stats_screen(query, context, date_from, date_to, label):
    async def fetch_common():
        return await get_common_data_aggregated(date_from, date_to)
    
    async def fetch_rfr():
        return await get_rfr_aggregated(date_from, date_to)
    
    try:
        common_ok, cinfo = await fetch_common()
        rfr_ok, rdata = await fetch_rfr()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        return
    
    if not common_ok or not rfr_ok:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="back_periods")]])
        await query.edit_message_text(f"‚ùó {common_ok or rfr_ok}", reply_markup=kb)
        return
    
    cc = cinfo["click_count"]
    uc = cinfo["click_unique"]
    confc = cinfo["conf_count"]
    confp = cinfo["conf_payout"]
    reg = rdata["registration"]
    ftd = rdata["ftd"]
    rd = rdata["rdeposit"]
    
    date_lbl = f"{date_from[:10]} .. {date_to[:10]}"
    base_text = build_stats_text(label, date_lbl, cc, uc, reg, ftd, rd, confc, confp)
    
    if "stats_store" not in context.user_data:
        context.user_data["stats_store"] = {}
    uniq_id = str(uuid.uuid4())[:8]
    context.user_data["stats_store"][uniq_id] = {
        "base_text": base_text,
        "clicks": cc,
        "unique": uc,
        "reg": reg,
        "ftd": ftd,
        "rd": rd,
        "date_from": date_from,
        "date_to": date_to,
        "label": label,
        "confp": confp,
        "timestamp": datetime.now()
    }

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"metrics|{uniq_id}")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
    ])
    
    await query.edit_message_text(base_text, parse_mode="HTML", reply_markup=kb)

# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç (–°–≤–æ–π –ø–µ—Ä–∏–æ–¥)
async def period_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_period"):
        return
    
    await try_delete_message(update)
    
    txt = update.message.text.strip()
    logger.info(f"–í–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞: {txt}")
    
    if txt.lower() == "–Ω–∞–∑–∞–¥":
        context.user_data.pop("awaiting_period", None)
        inline_id = context.user_data.pop("inline_msg_id", None)
        if inline_id:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                    InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                    InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
                ],
                [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
            ])
            await telegram_app.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=inline_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                parse_mode="HTML",
                reply_markup=kb
            )
        return
    
    try:
        parts = txt.split(",")
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç")
        period = Period(start=parts[0].strip(), end=parts[1].strip())
    except (ValidationError, ValueError):
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD).")
        context.user_data.pop("awaiting_period", None)
        return
    
    try:
        st_d = datetime.strptime(period.start, "%Y-%m-%d").date()
        ed_d = datetime.strptime(period.end, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        context.user_data.pop("awaiting_period", None)
        return
    
    if st_d > ed_d:
        await update.message.reply_text("‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
        context.user_data.pop("awaiting_period", None)
        return
    
    context.user_data.pop("awaiting_period", None)
    inline_id = context.user_data.pop("inline_msg_id", None)
    
    if not inline_id:
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    date_from = f"{st_d} 00:00"
    date_to = f"{ed_d} 23:59"
    lbl = "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥"
    chat_id = update.effective_chat.id
    
    try:
        await show_stats_screen(update.callback_query, context, date_from, date_to, lbl)
    except AttributeError:
        fquery = FakeQ(inline_id, chat_id)
        await show_stats_screen(fquery, context, date_from, date_to, lbl)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–µ—Ä–µ–∑ TTL
def clean_stats_store(context):
    now = datetime.now()
    to_remove = []
    for key, value in context.user_data.get("stats_store", {}).items():
        if (now - value.get("timestamp", now)).total_seconds() > 3600:
            to_remove.append(key)
    for key in to_remove:
        del context.user_data["stats_store"][key]

# Reply-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def reply_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    known_commands = ["üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–õ–ö –ü–ü", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    
    if text not in known_commands:
        return
    
    await try_delete_message(update)
    
    if text == "–õ–ö –ü–ü":
        link = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://cabinet.4rabetpartner.com/statistics"
        await update.message.reply_text(link, parse_mode="HTML", reply_markup=get_main_menu())
    elif text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
            ],
            [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=get_main_menu())

# Inline-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == "back_menu":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", parse_mode="HTML")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=get_main_menu())
        return
    
    if data in ["period_today", "period_7days", "period_month"]:
        if data == "period_today":
            d_str = datetime.now().strftime("%Y-%m-%d")
            date_from = f"{d_str} 00:00"
            date_to = f"{d_str} 23:59"
            label = "–°–µ–≥–æ–¥–Ω—è"
        elif data == "period_7days":
            end_ = datetime.now().date()
            start_ = end_ - timedelta(days=6)
            date_from = f"{start_} 00:00"
            date_to = f"{end_} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        else:
            end_ = datetime.now().date()
            start_ = end_ - timedelta(days=30)
            date_from = f"{start_} 00:00"
            date_to = f"{end_} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        await show_stats_screen(query, context, date_from, date_to, label)
        return
    
    if data == "period_custom":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="back_periods")]])
        await query.edit_message_text(PERIOD_INPUT_INSTRUCTIONS, parse_mode="HTML", reply_markup=kb)
        context.user_data["awaiting_period"] = True
        context.user_data["inline_msg_id"] = query.message.message_id
        return
    
    if data == "back_periods":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
            ],
            [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
    
    if data.startswith("metrics|"):
        uniq_id = data.split("|")[1]
        store = context.user_data.get("stats_store", {}).get(uniq_id)
        if not store:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        base_text = store["base_text"]
        metrics = calculate_metrics(
            store["clicks"],
            store["unique"],
            store["reg"],
            store["ftd"],
            store["rd"],
            store["confp"]
        )
        metrics_txt = build_metrics_text(metrics)
        final_txt = base_text + "\n" + metrics_txt
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"hide|{uniq_id}")],
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
        ])
        await query.edit_message_text(final_txt, parse_mode="HTML", reply_markup=kb)
    
    if data.startswith("hide|"):
        uniq_id = data.split("|")[1]
        store = context.user_data.get("stats_store", {}).get(uniq_id)
        if not store:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"metrics|{uniq_id}")],
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
        ])
        await query.edit_message_text(store["base_text"], parse_mode="HTML", reply_markup=kb)
    
    if data.startswith("update|"):
        clean_stats_store(context)
        uniq_id = data.split("|")[1]
        store = context.user_data.get("stats_store", {}).get(uniq_id)
        if not store:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        await show_stats_screen(
            query,
            context,
            store["date_from"],
            store["date_to"],
            store["label"]
        )

# FakeQ –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
class FakeQ:
    def __init__(self, message_id: int, chat_id: int):
        self.message_id = message_id
        self.chat_id = chat_id
    
    async def edit_message_text(self, text: str, **kwargs):
        await telegram_app.bot.edit_message_text(
            chat_id=self.chat_id,
            message_id=self.message_id,
            text=text,
            **kwargs
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, period_text_handler), group=1)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_button_handler), group=2)
telegram_app.add_handler(CallbackQueryHandler(inline_handler))

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    await init_telegram_app()
    uvicorn.run(app, host="0.0.0.0", port=PORT, log_level="info")

if __name__ == "__main__":
    import uvicorn
    asyncio.run(main())
