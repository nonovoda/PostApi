import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("PP_API_KEY")

# URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ü–ü (—É—Ç–æ—á–Ω–∏—Ç–µ –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ü–ü)
STATS_URL = "https://cabinet.4rabetpartner.com/api/partner/stats"
BALANCE_URL = "https://cabinet.4rabetpartner.com/api/partner/balance"

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã."""
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    query.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    command = query.data
    text = ""
    
    if command == 'stats':
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.get(STATS_URL, headers=headers)
        if response.status_code == 200:
            data = response.json()
            text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ü:*\n"
                f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversions', 'N/A')}\n"
                f"–î–æ—Ö–æ–¥: {data.get('revenue', 'N/A')}\n"
                f"–ë–∞–ª–∞–Ω—Å: {data.get('balance', 'N/A')}\n"
            )
        else:
            text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}"
    elif command == 'balance':
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.get(BALANCE_URL, headers=headers)
        if response.status_code == 200:
            data = response.json()
            text = (
                "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:*\n"
                f"–ë–∞–ª–∞–Ω—Å: {data.get('balance', 'N/A')}\n"
            )
        else:
            text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.text}"
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
    
    query.edit_message_text(text=text, parse_mode='Markdown')

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler("start", start))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Long Polling)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
