import os
import logging
import asyncio
import requests
from datetime import datetime, timedelta
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/api/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://apiposts-production-1dea.up.railway.app/webhook")
PORT = int(os.environ.get("PORT", 8080))

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
application = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_application():
    logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞...")
    await application.initialize()
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

    await application.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# ------------------------------
# FastAPI —Å–µ—Ä–≤–µ—Ä
# ------------------------------
app = FastAPI()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –≤ /webhook!")
    data = await request.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

    update = Update.de_json(data, application.bot)
    
    if not application.running:
        logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–¥ Webhook. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        await init_application()

    try:
        await application.process_update(update)
        logger.info("Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500

@app.post("/postback")
async def postback(request: Request):
    logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –≤ /postback!")
    data = await request.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

    if not data or data.get("api_key") != API_KEY:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á")
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}, 403

    message_text = (
        "üìå –û—Ñ—Ñ–µ—Ä: {offer_id}\n"
        "üõ† –ü–æ–¥—Ö–æ–¥: {sub_id_2}\n"
        "üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {goal}\n"
        "‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n"
        "üéØ –ö–∞–º–ø–∞–Ω–∏—è: {sub_id_4}\n"
        "üéØ –ê–¥—Å–µ—Ç: {sub_id_5}\n"
        "‚è∞ –í—Ä–µ–º—è: {conversion_date}"
    ).format(
        offer_id=data.get("offer_id", "N/A"),
        sub_id_2=data.get("sub_id_2", "N/A"),
        goal=data.get("goal", "N/A"),
        status=data.get("status", "N/A"),
        sub_id_4=data.get("sub_id_4", "N/A"),
        sub_id_5=data.get("sub_id_5", "N/A"),
        conversion_date=data.get("conversion_date", "N/A")
    )

    await application.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message_text)
    return {"status": "success"}

# ------------------------------
# Telegram Bot Handlers & Buttons
# ------------------------------
async def send_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
                [InlineKeyboardButton("üìã –û—Ñ—Ñ–µ—Ä—ã", callback_data='offers')],
                [InlineKeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏", callback_data='conversions')],
                [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç", callback_data='test_conversion')],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')],
                [InlineKeyboardButton("üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã", callback_data='top_offers')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "stats":
        response = requests.get(f"{BASE_API_URL}/partner/statistic/common", headers={"API-KEY": API_KEY})
        await query.edit_message_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.json()}")
    elif query.data == "offers":
        response = requests.get(f"{BASE_API_URL}/partner/offers", headers={"API-KEY": API_KEY})
        await query.edit_message_text(f"üìã –û—Ñ—Ñ–µ—Ä—ã: {response.json()}")
    elif query.data == "conversions":
        response = requests.get(f"{BASE_API_URL}/partner/statistic/conversions", headers={"API-KEY": API_KEY})
        await query.edit_message_text(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {response.json()}")
    elif query.data == "test_conversion":
        await query.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏...")
    elif query.data == "balance":
        response = requests.get(f"{BASE_API_URL}/partner/balance", headers={"API-KEY": API_KEY})
        await query.edit_message_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {response.json()}")
    elif query.data == "top_offers":
        response = requests.get(f"{BASE_API_URL}/partner/offers/top", headers={"API-KEY": API_KEY})
        await query.edit_message_text(f"üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã: {response.json()}")

application.add_handler(CommandHandler("start", send_buttons))
application.add_handler(CallbackQueryHandler(button_handler))
