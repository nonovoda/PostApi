import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
import json
import uuid
import sqlite3
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_CHAT_ID")  # üîí –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID
DB_PATH = os.getenv("DB_PATH", "users.db")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ------------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
      user_id TEXT PRIMARY KEY,
      chat_id TEXT,
      is_approved INTEGER DEFAULT 0,
      awaiting_api INTEGER DEFAULT 0,
      api_key TEXT,
      postback_token TEXT UNIQUE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()
    conn.close()

init_db()

# ------------------------------
# üîí –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –î–û–°–¢–£–ü–ê
# ------------------------------
async def check_access(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ chat_id"""
    try:
        current_chat_id = int(update.effective_chat.id)
        allowed_chat_id = int(TELEGRAM_CHAT_ID.strip())
        
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {current_chat_id} vs {allowed_chat_id}")
        
        if current_chat_id != allowed_chat_id:
            logger.warning(f"üö® –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è: {current_chat_id}")
            if update.message:
                await update.message.delete()
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            elif update.callback_query:
                await update.callback_query.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        return False

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------------------
# Webhook (Telegram + Postback)
# ------------------------------
@app.api_route("/webhook", methods=["GET", "POST"])
async def webhook_handler(request: Request):
    if request.method == "GET":
        data = dict(request.query_params)
        return await process_postback_data(data)
    
    try:
        data = await request.json()
        if "update_id" in data:
            update = Update.de_json(data, telegram_app.bot)
            
            # üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            if not await check_access(update):
                return {"status": "access_denied"}
            
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
        else:
            return await process_postback_data(data)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
    
    return {"status": "ok"}

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
# ------------------------------
async def init_telegram_app():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# Postback (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)
# ------------------------------
async def process_postback_data(data: dict, chat_id=None):
    logger.debug(f"Postback data: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id3 = data.get("sub_id3", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    cdate = data.get("conversion_date", "N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id3}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{cdate}</i>"
    )
    
    if not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return {"error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID"}, 500
    
    try:
        await telegram_app.bot.send_message(
            chat_id=chat_id or TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML"
        )
        logger.debug("Postback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ postback: {e}")
        return {"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500
    return {"status": "ok"}

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_access(update):
        return

    txt = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    mk = get_main_menu()
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=mk)

# ------------------------------
# –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ------------------------------
async def request_access_handler(update, context):
    uid = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT OR IGNORE INTO users (user_id, chat_id, is_approved, awaiting_api)
        VALUES (?, ?, 0, 1)
    """, (uid, chat_id))
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"access|approve|{uid}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"access|deny|{uid}")
    ]])
    await telegram_app.bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,
        text=f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @{update.effective_user.username} ({uid})",
        reply_markup=kb
    )

telegram_app.add_handler(MessageHandler(filters.Regex("^üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø$"), request_access_handler), group=0)

# ------------------------------
# Inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∞
# ------------------------------
async def admin_access_callback(update, context):
    q = update.callback_query
    await q.answer()
    _, action, uid = q.data.split("|")
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    if action == "approve":
        cur.execute("UPDATE users SET is_approved=1, awaiting_api=1 WHERE user_id=?", (uid,))
        conn.commit()
        await telegram_app.bot.send_message(
            chat_id=uid,
            text="‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞–º–∏ –Ω–∞ –±–∞–∑–µ Alanbase.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."
        )
    else:  # deny
        cur.execute("DELETE FROM users WHERE user_id=?", (uid,))
        conn.commit()
        await telegram_app.bot.send_message(
            chat_id=uid,
            text="‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω."
        )

    conn.close()
    await q.edit_message_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å {action} –¥–ª—è {uid}")

telegram_app.add_handler(CallbackQueryHandler(admin_access_callback, pattern="^access\\|"))

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞
# ------------------------------
async def api_key_handler(update, context):
    uid = str(update.effective_user.id)
    key = update.message.text.strip()

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT awaiting_api FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()

    if not row or row[0] == 0:
        conn.close()
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞

    token = str(uuid.uuid4())[:8]
    cur.execute("""
        UPDATE users
        SET api_key=?, postback_token=?, awaiting_api=0
        WHERE user_id=?
    """, (key, token, uid))
    conn.commit()
    conn.close()

    link = f"https://yourbot.domain/webhook?token={token}&offer_id={{offer_id}}&sub_id3={{sub_id3}}&goal={{goal}}&revenue={{revenue}}&currency={{currency}}&status={{status}}&sub_id4={{sub_id4}}&sub_id5={{sub_id5}}&conversion_date={{conversion_date}}"
    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\nüîó –í–∞—à Postback URL:\n<code>{link}</code>",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, api_key_handler), group=1)

# ------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
