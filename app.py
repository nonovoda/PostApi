import os
import logging
import requests
from threading import Thread
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Alanbase Partner API
BASE_API_URL = "https://api.alanbase.com/api/v1"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (—Å User-Agent)
API_HEADERS = {
    "API-KEY": API_KEY,
    "Content-Type": "application/json",
    "User-Agent": "AlanbaseTelegramBot/1.0"
}

# ------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ------------------------------
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.debug("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ç–æ–∫–µ–Ω–æ–º: %s", TELEGRAM_TOKEN)

# ------------------------------
# Flask API
# ------------------------------
app = Flask(__name__)

@app.route('/postback', methods=['GET', 'POST'])
def postback():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /postback: %s", request.data)
    data = request.get_json() or request.args
    if not data:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ /postback")
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    if not data.get('api_key'):
        logger.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω API-–∫–ª—é—á –≤ /postback")
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω API-–∫–ª—é—á"}), 400
    if data.get('api_key') != API_KEY:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á –≤ /postback: %s", data.get('api_key'))
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}), 403

    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: %s", message_text)
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message_text, "parse_mode": "Markdown"}
    requests.post(telegram_url, json=payload)
    return jsonify({"status": "success"}), 200

@app.route('/test', methods=['GET'])
def test():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /test")
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": test_message, "parse_mode": "Markdown"}
    requests.post(telegram_url, json=payload)
    return jsonify({"status": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}), 200

@app.route('/stats', methods=['GET'])
def stats():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /stats")
    url = f"{BASE_API_URL}/partner/statistic/common"
    response = requests.get(url, headers=API_HEADERS)
    logger.debug("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å—Ç–∞—Ç—É—Å: %s, –æ—Ç–≤–µ—Ç: %s", response.status_code, response.text)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –≤ /stats: %s", response.text)
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        meta = data.get("meta", {})
        stats_message = (
            "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('page', 'N/A')}\n"
            f"–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {meta.get('per_page', 'N/A')}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {meta.get('total_count', 'N/A')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('last_page', 'N/A')}\n"
        )
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %s", stats_message)
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": stats_message, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}), 200
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", response.text)
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

@app.route('/offers', methods=['GET'])
def offers():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /offers")
    url = f"{BASE_API_URL}/partner/offers"
    response = requests.get(url, headers=API_HEADERS)
    logger.debug("–û—Ñ—Ñ–µ—Ä—ã, —Å—Ç–∞—Ç—É—Å: %s, –æ—Ç–≤–µ—Ç: %s", response.status_code, response.text)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –≤ /offers: %s", response.text)
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        offers_list = data.get("data", [])
        meta = data.get("meta", {})
        if not offers_list:
            offers_text = "‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            offers_text = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤:*\n"
            offers_text += f"–í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {meta.get('total_count', 'N/A')}\n"
            for offer in offers_list[:3]:
                name = offer.get("name", "N/A")
                offer_id = offer.get("id", "N/A")
                offers_text += f"üîπ {name} (ID: {offer_id})\n"
            if meta.get("total_count", 0) > 3:
                offers_text += "‚Ä¶ –∏ –¥—Ä—É–≥–∏–µ"
        logger.info("–û—Ñ—Ñ–µ—Ä—ã: %s", offers_text)
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": offers_text, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–û—Ñ—Ñ–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"}), 200
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: %s", response.text)
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

@app.route('/conversions', methods=['GET'])
def conversions():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /conversions")
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "timezone": "Europe/Moscow",
        "date_from": "2023-01-01 00:00:00",
        "date_to": "2023-01-02 00:00:00"
    }
    url = f"{BASE_API_URL}/partner/statistic/conversions"
    response = requests.get(url, headers=API_HEADERS, params=params)
    logger.debug("–ö–æ–Ω–≤–µ—Ä—Å–∏–∏, —Å—Ç–∞—Ç—É—Å: %s, –æ—Ç–≤–µ—Ç: %s", response.status_code, response.text)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –≤ /conversions: %s", response.text)
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        meta = data.get("meta", {})
        total = meta.get("total_count", "N/A")
        conversions_message = f"üîÑ *–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:*\n–í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {total}"
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": conversions_message, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"}), 200
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π: %s", response.text)
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

# ------------------------------
# Telegram-–±–æ—Ç —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
# ------------------------------
def start(update: Update, context: CallbackContext) -> None:
    logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", update.effective_user.username)
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Å–∏–∏", callback_data='conversions')],
        [InlineKeyboardButton("–û—Ñ—Ñ–µ—Ä—ã", callback_data='offers')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    logger.debug("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: %s", query.data)
    query.answer()
    command = query.data
    text = ""

    if command == 'stats':
        text = "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    elif command == 'conversions':
        text = get_conversions()
    elif command == 'offers':
        text = get_offers()
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    logger.debug("–û—Ç–≤–µ—Ç –±–æ—Ç–∞: %s", text)
    query.edit_message_text(text=text, parse_mode='Markdown')

def get_conversions():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º —á–µ—Ä–µ–∑ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    params = {
        "timezone": "Europe/Moscow",
        "date_from": "2023-01-01 00:00:00",
        "date_to": "2023-01-02 00:00:00"
    }
    url = f"{BASE_API_URL}/partner/statistic/conversions"
    response = requests.get(url, headers=API_HEADERS, params=params)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ get_conversions: %s", response.text)
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API."
        meta = data.get("meta", {})
        total = meta.get("total_count", "N/A")
        return f"üîÑ *–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*\n–í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {total}"
    else:
        logger.error("–û—à–∏–±–∫–∞ API –≤ get_conversions: %s %s", response.status_code, response.text)
        return f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"

def get_offers():
    url = f"{BASE_API_URL}/partner/offers"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ get_offers: %s", response.text)
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API."
        offers_list = data.get("data", [])
        meta = data.get("meta", {})
        if not offers_list:
            return "‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        offers_text = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤:*\n"
        offers_text += f"–í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {meta.get('total_count', 'N/A')}\n"
        for offer in offers_list[:3]:
            name = offer.get("name", "N/A")
            offer_id = offer.get("id", "N/A")
            offers_text += f"üîπ {name} (ID: {offer_id})\n"
        if meta.get("total_count", 0) > 3:
            offers_text += "‚Ä¶ –∏ –¥—Ä—É–≥–∏–µ"
        return offers_text
    else:
        logger.error("–û—à–∏–±–∫–∞ API –≤ get_offers: %s %s", response.status_code, response.text)
        return f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"

def run_telegram_bot():
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    updater.start_polling()
    updater.idle()

# ------------------------------
# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
# ------------------------------
def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    telegram_thread = Thread(target=run_telegram_bot)
    flask_thread.start()
    telegram_thread.start()
    flask_thread.join()
    telegram_thread.join()
