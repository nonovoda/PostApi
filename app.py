import os
import logging
import asyncio
import httpx
from datetime import datetime
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
application = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_application():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await application.initialize()
    await application.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# FastAPI —Å–µ—Ä–≤–µ—Ä
# ------------------------------
app = FastAPI()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –≤ /webhook")
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    update = Update.de_json(data, application.bot)

    if not application.running:
        logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        await init_application()

    try:
        await application.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500

# ------------------------------
# Telegram Bot Handlers & Reply-–∫–Ω–æ–ø–∫–∏
# ------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è"],
                ["üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã"],
                ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        text = update.message.text
    elif update.callback_query:
        text = update.callback_query.data
        await update.callback_query.answer()
    else:
        return

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    }

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å":
        date_from = datetime.now().strftime("%Y-%m-%d 00:00")
        date_to = datetime.now().strftime("%Y-%m-%d 23:59")

        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {params}")

        async with httpx.AsyncClient() as client:
            response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)

        logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")

        message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: {response.json()}" if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        await update.message.reply_text(message)

    elif text == "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        await update.message.reply_text("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏...")
    elif text == "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    elif text == "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã":
        await update.message.reply_text("üìà –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –æ—Ñ—Ñ–µ—Ä–æ–≤...")
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
