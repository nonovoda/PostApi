import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID

from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------------------
# Webhook –¥–ª—è Telegram –∏ –ø–æ—Å—Ç–±–µ–∫–æ–≤
# ------------------------------
@app.api_route("/webhook", methods=["GET","POST"])
async def webhook_handler(request: Request):
    if request.method == "GET":
        # postback
        data = dict(request.query_params)
        return await process_postback_data(data)

    # POST
    try:
        data = await request.json()
        if "update_id" in data:
            # Telegram update
            update = Update.de_json(data, telegram_app.bot)
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
            return {"status": "ok"}
        else:
            # postback
            return await process_postback_data(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ webhook: {e}")
        return {"status": "ok"}

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# ------------------------------
async def init_telegram_app():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –ü—Ä–∏—ë–º –ø–æ—Å—Ç–±–µ–∫–æ–≤ (–∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
# ------------------------------
async def process_postback_data(data: dict):
    logger.debug(f"Postback data: {data}")
    offer_id = data.get("offer_id","N/A")
    sub_id2  = data.get("sub_id2","N/A")
    goal     = data.get("goal","N/A")
    revenue  = data.get("revenue","N/A")
    currency = data.get("currency","USD")
    status   = data.get("status","N/A")
    sub_id4  = data.get("sub_id4","N/A")
    sub_id5  = data.get("sub_id5","N/A")
    cdate    = data.get("conversion_date","N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id2}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{cdate}</i>"
    )
    try:
        await telegram_app.bot.send_message(
            chat_id=os.getenv("TELEGRAM_CHAT_ID","YOUR_CHAT_ID"),
            text=msg,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–±–µ–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error":"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}, 500

    return {"status":"ok"}

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(update.effective_chat.id, last_id)
        except:
            pass

    txt = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    mk  = get_main_menu()
    sent = await update.message.reply_text(txt, parse_mode="HTML", reply_markup=mk)
    context.user_data["last_msg_id"] = sent.message_id

# ------------------------------
# –ó–∞–ø—Ä–æ—Å /common
# ------------------------------
async def get_common_data(date_from: str, date_to: str):
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by":"day",
                    "timezone":"Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code":"USD"
                }
            )
        if resp.status_code == 200:
            return True, resp.json()
        else:
            return False, f"–û—à–∏–±–∫–∞ /common: {resp.status_code} {resp.text}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /common: {e}"

# ------------------------------
# –ó–∞–ø—Ä–æ—Å /conversions (—Ä–µ–≥, FTD, RD)
# ------------------------------
async def get_rfr(date_from: str, date_to: str):
    """
    registration, ftd, rdeposit
    """
    out = {"registration":0,"ftd":0,"rdeposit":0}
    base_params = [
        ("timezone","Europe/Moscow"),
        ("date_from",date_from),
        ("date_to",date_to),
        ("per_page","500")
    ]
    for g in ["registration","ftd","rdeposit"]:
        base_params.append(("goal_keys[]", g))

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY},
                params=base_params
            )
        if resp.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ /conversions: {resp.status_code} {resp.text}"
        arr = resp.json().get("data",[])
        for c in arr:
            goal_key = c.get("goal",{}).get("key","")
            if goal_key in out:
                out[goal_key]+=1
        return True, out
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /conversions: {e}"

# ------------------------------
# –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –º–µ—Ç—Ä–∏–∫
# ------------------------------
def build_stats_text(label, date_info, clicks, unique_clicks, reg, ftd, rd, conf_count, conf_payout):
    return (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ({label})\n\n"
        f"üóì <b>–ü–µ—Ä–∏–æ–¥:</b> <i>{date_info}</i>\n\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> <i>{clicks}</i> (—É–Ω–∏–∫: {unique_clicks})\n"
        f"üÜï <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <i>{reg}</i>\n"
        f"üíµ <b>FTD:</b> <i>{ftd}</i>\n"
        f"üîÑ <b>RD:</b> <i>{rd}</i>\n\n"
        f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conf_count}</i>\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> <i>{conf_payout} USD</i>\n"
    )

# ------------------------------
# –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫
# ------------------------------
def build_metrics_text(clicks, unique_clicks, reg, ftd, rd):
    """
     C2R = (reg/clicks)*100
     R2D = (ftd/reg)*100
     C2D = (ftd/clicks)*100
     EPC = ftd/clicks
     uEPC= ftd/unique_clicks
     –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = (ftd + rd)/ftd
    """
    c2r = (reg/clicks*100) if clicks>0 else 0
    r2d = (ftd/reg*100) if reg>0 else 0
    c2d = (ftd/clicks*100) if clicks>0 else 0
    epc = (ftd/clicks) if clicks>0 else 0
    uepc= (ftd/unique_clicks) if unique_clicks>0 else 0
    avg_check = ((ftd+rd)/ftd) if ftd>0 else 0

    return (
        "üéØ <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n\n"
        f"‚Ä¢ <b>C2R</b> = {c2r:.2f}%\n"
        f"‚Ä¢ <b>R2D</b> = {r2d:.2f}%\n"
        f"‚Ä¢ <b>C2D</b> = {c2d:.2f}%\n\n"
        f"‚Ä¢ <b>EPC</b> = {epc:.3f}\n"
        f"‚Ä¢ <b>uEPC</b> = {uepc:.3f}\n\n"
        f"‚Ä¢ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</b> = {avg_check:.2f}\n"
    )

# ------------------------------
# Inline –∫–Ω–æ–ø–∫–∏
# ------------------------------
async def inline_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_mainmenu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode="HTML")
        mk = get_main_menu()
        sent = await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = sent.message_id
        return

    # –ì–æ—Ç–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    if data in ["period_today","period_7days","period_month"]:
        if data == "period_today":
            d_str = datetime.now().strftime("%Y-%m-%d")
            date_from = f"{d_str} 00:00"
            date_to   = f"{d_str} 23:59"
            label = "–°–µ–≥–æ–¥–Ω—è"
        elif data == "period_7days":
            end_d = datetime.now().date()
            start_d = end_d - timedelta(days=6)
            date_from = f"{start_d} 00:00"
            date_to   = f"{end_d} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        else:
            end_d = datetime.now().date()
            start_d = end_d - timedelta(days=30)
            date_from = f"{start_d} 00:00"
            date_to   = f"{end_d} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        await show_unified_stats(query, context, date_from, date_to, label)
        return

    if data == "period_custom":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã
        txt = (
            "üóì <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b> (YYYY-MM-DD,YYYY-MM-DD)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await query.edit_message_text(txt, parse_mode="HTML")
        context.user_data["awaiting_custom_period"] = True
        context.user_data["inline_msg_id"] = query.message.message_id
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "metrics|<id>"
    if data.startswith("metrics|"):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID
        parts = data.split("|")
        unique_id = parts[1]
        stored = context.user_data.get("stats_storage",{}).get(unique_id)
        if not stored:
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="HTML")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metxt = build_metrics_text(
            stored["clicks"],
            stored["unique_clicks"],
            stored["registration"],
            stored["ftd"],
            stored["rdeposit"]
        )
        final_msg = stored["base_text"] + "\n" + metxt

        # –ö–Ω–æ–ø–∫–∞ "–°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "–°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                    callback_data=f"hide|{unique_id}"
                )
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        await query.edit_message_text(final_msg, parse_mode="HTML", reply_markup=kb)
        return

    # "hide|<id>" - —É–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if data.startswith("hide|"):
        parts = data.split("|")
        unique_id = parts[1]
        stored = context.user_data.get("stats_storage",{}).get(unique_id)
        if not stored:
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º base_text
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                    callback_data=f"metrics|{unique_id}"
                )
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        await query.edit_message_text(stored["base_text"], parse_mode="HTML", reply_markup=kb)
        return

    # –ò–Ω–∞—á–µ
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML")

# ------------------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö + –∫–Ω–æ–ø–∫–∞ "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
# ------------------------------
async def show_unified_stats(query, context, date_from: str, date_to: str, label: str):
    # 1) /common
    ok_c, data_c = await get_common_data(date_from, date_to)
    if not ok_c:
        text = f"‚ùó {data_c}"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
        ])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return

    st = data_c.get("data",[{}])[0]
    gf = st.get("group_fields",[])
    date_info = gf[0].get("label") if gf else "N/A"
    clicks = st.get("click_count",0)
    unique_clicks = st.get("click_unique_count",0)
    c_confirmed = st.get("conversions",{}).get("confirmed",{})
    conf_count  = c_confirmed.get("count",0)
    conf_pay    = c_confirmed.get("payout",0.0)

    # 2) /conversions => registration, ftd, rdeposit
    ok_r, data_r = await get_rfr(date_from, date_to)
    if not ok_r:
        text = f"‚ùó {data_r}"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
        ])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return

    reg = data_r["registration"]
    ftd = data_r["ftd"]
    rd  = data_r["rdeposit"]

    # –°—Ç—Ä–æ–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –º–µ—Ç—Ä–∏–∫)
    base_text = build_stats_text(
        label, date_info, clicks, unique_clicks, reg, ftd, rd, conf_count, conf_pay
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–º ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö callback_data
    unique_id = str(uuid.uuid4())[:8]  # 8 —Å–∏–º–≤–æ–ª–æ–≤
    if "stats_storage" not in context.user_data:
        context.user_data["stats_storage"] = {}
    context.user_data["stats_storage"][unique_id] = {
        "base_text": base_text,
        "clicks": clicks,
        "unique_clicks": unique_clicks,
        "registration": reg,
        "ftd": ftd,
        "rdeposit": rd,
    }

    # inline-–∫–Ω–æ–ø–∫–∞ "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏" => "metrics|<unique_id>"
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                callback_data=f"metrics|{unique_id}"
            )
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
        ]
    ])
    await query.edit_message_text(base_text, parse_mode="HTML", reply_markup=kb)

# ------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤—Ä—É—á–Ω—É—é
# ------------------------------
async def text_handler_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_custom_period"):
        txt = update.message.text.strip()
        if txt.lower() == "–Ω–∞–∑–∞–¥":
            context.user_data["awaiting_custom_period"] = False
            inline_id = context.user_data.get("inline_msg_id")
            if inline_id:
                kb = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                        InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                        InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
                    ],
                    [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
                ])
                try:
                    await update.message.delete()
                    await context.bot.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                        parse_mode="HTML",
                        chat_id=update.effective_chat.id,
                        message_id=inline_id,
                        reply_markup=kb
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
            return

        # –ü–∞—Ä—Å–∏–º
        parts = txt.split(",")
        if len(parts)!=2:
            await update.message.delete()
            await context.bot.send_message(
                update.effective_chat.id,
                "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (YYYY-MM-DD,YYYY-MM-DD) –∏–ª–∏ '–ù–∞–∑–∞–¥'"
            )
            return
        try:
            start_d = datetime.strptime(parts[0].strip(),"%Y-%m-%d").date()
            end_d   = datetime.strptime(parts[1].strip(),"%Y-%m-%d").date()
        except:
            await update.message.delete()
            await context.bot.send_message(
                update.effective_chat.id,
                "‚ùó –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ '–ù–∞–∑–∞–¥'."
            )
            return

        if start_d > end_d:
            await update.message.delete()
            await context.bot.send_message(
                update.effective_chat.id,
                "‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π!"
            )
            return

        context.user_data["awaiting_custom_period"] = False
        inline_id = context.user_data["inline_msg_id"]
        await update.message.delete()

        date_from = f"{start_d} 00:00"
        date_to   = f"{end_d} 23:59"
        label     = f"{start_d} - {end_d}"

        # "–§–µ–π–∫–æ–≤—ã–π query", —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å show_unified_stats
        class FakeQuery:
            def __init__(self, msg_id, chat_id):
                self.message = type("Msg", (), {})()
                self.message.message_id = msg_id
                self.message.chat_id    = chat_id
            async def edit_message_text(self,*args,**kwargs):
                return await context.bot.edit_message_text(
                    chat_id=self.message.chat_id,
                    message_id=self.message.message_id,
                    *args,**kwargs
                )
            async def answer(self):
                pass

        fake_query = FakeQuery(inline_id, update.effective_chat.id)
        await show_unified_stats(fake_query, context, date_from, date_to, label)

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ Reply-–∫–Ω–æ–ø–æ–∫ (–õ–ö –ü–ü, –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
# ------------------------------
async def reply_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(1)
    try:
        await update.message.delete()
    except:
        pass

    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(update.effective_chat.id, last_id)
        except:
            pass

    text = update.message.text.strip()

    if text == "–õ–ö –ü–ü":
        link_text = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞: https://cabinet.4rabetpartner.com/statistics"
        sent = await update.message.reply_text(link_text, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏: period_today, period_7days, period_month, period_custom
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
            ],
            [
                InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        sent = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        mk = get_main_menu()
        msg = await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = msg.message_id
        return

    # –ò–Ω–∞—á–µ
    msg = await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML", reply_markup=get_main_menu())
    context.user_data["last_msg_id"] = msg.message_id

# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–∞—Ç (group=1)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler_dates), group=1)
# –ü–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ Reply-–∫–Ω–æ–ø–∫–∏ (group=2)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_button_handler), group=2)
# Inline-–∫–Ω–æ–ø–∫–∏ (show stats, metrics)
telegram_app.add_handler(CallbackQueryHandler(inline_button_handler))

# ------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
