import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
import json
import uuid
import sqlite3
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_CHAT_ID")
DB_PATH = os.getenv("DB_PATH", "users.db")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ------------------------------
app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# SQLite: —Ç–∞–±–ª–∏—Ü–∞ users
# ------------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
      user_id TEXT PRIMARY KEY,
      chat_id TEXT,
      is_approved INTEGER DEFAULT 0,
      awaiting_api INTEGER DEFAULT 0,
      api_key TEXT,
      postback_token TEXT UNIQUE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()
    conn.close()

init_db()

def get_db():
    return sqlite3.connect(DB_PATH)

def get_user_status(user_id):
    conn = get_db(); cur = conn.cursor()
    cur.execute("SELECT is_approved, awaiting_api FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    return row if row else (0, 0)

# ------------------------------
# üîí –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
# ------------------------------
async def check_access(update: Update) -> bool:
    try:
        current_chat_id = int(update.effective_chat.id)
        allowed_chat_id = int(os.getenv("TELEGRAM_CHAT_ID", "0"))

        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
        if update.message and update.message.text == "üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø":
            return True

        if current_chat_id != allowed_chat_id:
            logger.warning(f"üö® –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è: {current_chat_id}")
            if update.message:
                await update.message.delete()
                await update.message.reply_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton("üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")]],
                        resize_keyboard=True
                    )
                )
            elif update.callback_query:
                await update.callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        return False

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    chat = str(update.effective_chat.id)
    conn = get_db(); cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users(user_id,chat_id) VALUES(?,?)", (uid, chat))
    conn.commit(); conn.close()
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_menu())

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª
# ------------------------------
async def request_access_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = str(update.effective_chat.id)  # ID —á–∞—Ç–∞
    user_name = update.effective_user.username  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –¥–æ—Å—Ç—É–ø)
    conn = get_db()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor()
    cur.execute("""
        INSERT OR IGNORE INTO users(user_id, chat_id, awaiting_api)
        VALUES(?, ?, 1)
    """, (user_id, chat_id))  # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ –≤–∞–º)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"access|approve|{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"access|deny|{user_id}")
    ]])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à —á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await telegram_app.bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,  # –í–∞—à ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
        text=f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @{user_name} ({user_id})",
        reply_markup=kb
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û–¥–æ–±—Ä–∏—Ç—å" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
async def access_request_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    action, user_id = data.split("|")[1:]  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å) –∏ user_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = get_db()
    cur = conn.cursor()

    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ "–æ–¥–æ–±—Ä–∏—Ç—å"
    if action == "approve":
        cur.execute("""
            UPDATE users SET is_approved = 1 WHERE user_id = ?
        """, (user_id,))
        conn.commit()
        conn.close()
        await query.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω!")
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.")
    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
    elif action == "deny":
        cur.execute("""
            UPDATE users SET is_approved = 0 WHERE user_id = ?
        """, (user_id,))
        conn.commit()
        conn.close()
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–µ—à–µ–Ω–∏–∏
    await telegram_app.bot.send_message(
        chat_id=user_id,
        text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª {('–æ–¥–æ–±—Ä–µ–Ω', '–æ—Ç–∫–ª–æ–Ω—ë–Ω')[action == 'deny']}. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )

# ------------------------------
# Inline-–∫–æ–ª–ª–±—ç–∫ –∞–¥–º–∏–Ω–∞
# ------------------------------
async def admin_access_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, action, uid = q.data.split("|")
    conn = get_db(); cur = conn.cursor()
    if action == "approve":
        cur.execute("UPDATE users SET is_approved=1,awaiting_api=1 WHERE user_id=?", (uid,))
        conn.commit()
        await telegram_app.bot.send_message(
            chat_id=uid,
            text="‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞–º–∏ Alanbase.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á:"
        )
        res = "–û–¥–æ–±—Ä–µ–Ω–æ"
    else:
        cur.execute("DELETE FROM users WHERE user_id=?", (uid,))
        conn.commit()
        await telegram_app.bot.send_message(chat_id=uid, text="‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        res = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    conn.close()
    await q.edit_message_text(f"{res} –¥–ª—è {uid}")

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞
# ------------------------------
async def api_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    text = update.message.text.strip()
    is_approved, awaiting = get_user_status(uid)
    if awaiting != 1:
        return  # –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–ª—é—á
    token = str(uuid.uuid4())[:8]
    conn = get_db(); cur = conn.cursor()
    cur.execute("""
        UPDATE users
        SET api_key=?, postback_token=?, awaiting_api=0
        WHERE user_id=?
    """, (text, token, uid))
    conn.commit(); conn.close()
    link = (
        f"https://your.domain/webhook?token={token}"
        "&offer_id={offer_id}&sub_id3={sub_id3}&goal={goal}"
        "&revenue={revenue}&currency={currency}&status={status}"
        "&sub_id4={sub_id4}&sub_id5={sub_id5}&conversion_date={conversion_date}"
    )
    await update.message.reply_text(
        f"‚úÖ API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\nüîó –í–∞—à Postback URL:\n<code>{link}</code>\n\n"
        "sub_id3 ‚Äî –ø–æ–¥—Ö–æ–¥, sub_id4 ‚Äî –∫–∞–º–ø–∞–Ω–∏—è, sub_id5 ‚Äî –∞–¥—Å–µ—Ç",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

# ------------------------------
# –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π Webhook –¥–ª—è –ø–æ—Å—Ç–±–µ–∫–æ–≤
# ------------------------------
@app.api_route("/webhook", methods=["GET", "POST"])
async def webhook_handler(request: Request):
    # GET ‚Äî –ø–æ —Ç–æ–∫–µ–Ω—É
    if request.method == "GET":
        params = dict(request.query_params)
        token = params.get("token")
        conn = get_db(); cur = conn.cursor()
        cur.execute("SELECT chat_id FROM users WHERE postback_token=?", (token,))
        row = cur.fetchone(); conn.close()
        if not row:
            return {"status": "unauthorized"}
        return await process_postback_data(params, chat_id=row[0])

    # POST ‚Äî –¥–ª—è Telegram
    data = await request.json()
    if "update_id" in data:
        update = Update.de_json(data, telegram_app.bot)
        if not await check_access(update):
            return {"status": "access_denied"}
        if not telegram_app.running:
            await init_telegram_app()
        await telegram_app.process_update(update)
        return {"status": "ok"}
    else:
        return await process_postback_data(data)

# ------------------------------
# process_postback_data (–Ω–µ –º–µ–Ω—è–µ–º –≤–∞—à —Ç–µ–∫—Å—Ç)
# ------------------------------
async def process_postback_data(data: dict, chat_id=None):
    # ... (–≤–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è) ...
    await telegram_app.bot.send_message(chat_id=chat_id or TELEGRAM_CHAT_ID, text="üîî –ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!", parse_mode="HTML")
    return {"status": "ok"}

async def process_postback_data(data: dict):
    logger.debug(f"Postback data: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id3 = data.get("sub_id3", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    cdate = data.get("conversion_date", "N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id3}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{cdate}</i>"
    )
    
    if not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return {"error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID"}, 500
    
    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML"
        )
        logger.debug("Postback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ postback: {e}")
        return {"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500
    return {"status": "ok"}

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_access(update):
        return

    txt = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    mk = get_main_menu()
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=mk)

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /common (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# ------------------------------
async def get_common_data_aggregated(date_from: str, date_to: str):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å /common –∑–∞ –ø–µ—Ä–∏–æ–¥: {date_from} - {date_to}")
        
        async with httpx.AsyncClient(timeout=30) as client:
            r = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from.split()[0],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    "date_to": date_to.split()[0],      # –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                    "currency_code": "USD"
                }
            )

        if r.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ /common {r.status_code}: {r.text}"
        
        data = r.json()
        arr = data.get("data", [])
        
        logger.debug(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ API: {json.dumps(arr, ensure_ascii=False)}")
        
        # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        total = {
            "click_count": 0,
            "click_unique": 0,
            "conf_count": 0,
            "conf_payout": 0.0
        }
        
        for item in arr:
            total["click_count"] += int(item.get("click_count", 0))
            total["click_unique"] += int(item.get("click_unique_count", 0))
            
            conversions = item.get("conversions", {})
            confirmed = conversions.get("confirmed", {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π
            if isinstance(confirmed, dict):
                total["conf_count"] += int(confirmed.get("count", 0))
                total["conf_payout"] += float(confirmed.get("payout", 0))
            else:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {type(confirmed)}")

        logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {total}")
        return True, total
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_common_data_aggregated: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# ------------------------------
# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è /conversions (registration, ftd, rdeposit)
# ------------------------------
async def get_rfr_aggregated(date_from: str, date_to: str):
    out = {"registration": 0, "ftd": 0, "rdeposit": 0}
    page = 1
    goal_keys = ["registration", "ftd", "rdeposit"]

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            while True:
                params = [
                    ("timezone", "Europe/Moscow"),
                    ("date_from", date_from),
                    ("date_to", date_to),
                    ("per_page", "500"),
                    ("page", str(page)),
                    ("group_by", "day")
                ]
                for key in goal_keys:
                    params.append(("goal_keys[]", key))

                resp = await client.get(
                    f"{BASE_API_URL}/partner/statistic/conversions",
                    headers={"API-KEY": API_KEY},
                    params=params
                )

                if resp.status_code != 200:
                    return False, f"–û—à–∏–±–∫–∞ /conversions {resp.status_code}: {resp.text}"

                arr = resp.json().get("data", [])
                if not arr:
                    break  # –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º

                for c in arr:
                    g = c.get("goal", {}).get("key")
                    if g in out:
                        out[g] += 1

                page += 1  # —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

        return True, out
    except Exception as e:
        return False, str(e)

# ------------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ------------------------------
def build_stats_text(label, date_label, clicks, unique_clicks, reg_count, ftd_count, rd_count, conf_count, conf_payout):
    return (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ({label})\n\n"
        f"üóì <b>–ü–µ—Ä–∏–æ–¥:</b> <i>{date_label}</i>\n\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> <i>{clicks}</i> (—É–Ω–∏–∫: {unique_clicks})\n"
        f"üÜï <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <i>{reg_count}</i>\n"
        f"üíµ <b>FTD:</b> <i>{ftd_count}</i>\n"
        f"üîÑ <b>RD:</b> <i>{rd_count}</i>\n\n"
        f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conf_count}</i>\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> <i>{conf_payout:.2f} USD</i>\n"
    )

# ------------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
# ------------------------------
def build_metrics(clicks, unique_clicks, reg, ftd, conf_payout, rd):
    c2r = (reg / clicks * 100) if clicks > 0 else 0
    r2d = (ftd / reg * 100) if reg > 0 else 0
    c2d = (ftd / clicks * 100) if clicks > 0 else 0
    fd2rd = (rd / ftd * 100) if ftd > 0 else 0
    epc = (conf_payout / clicks) if clicks > 0 else 0
    uepc = (conf_payout / unique_clicks) if unique_clicks > 0 else 0
    return (
        "üéØ <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n\n"
        f"‚Ä¢ <b>C2R</b> = {c2r:.2f}%\n"
        f"‚Ä¢ <b>R2D</b> = {r2d:.2f}%\n"
        f"‚Ä¢ <b>C2D</b> = {c2d:.2f}%\n"
        f"‚Ä¢ <b>FD2RD</b> = {fd2rd:.2f}%\n\n"
        f"‚Ä¢ <b>EPC</b> = {epc:.3f} USD\n"
        f"‚Ä¢ <b>uEPC</b> = {uepc:.3f} USD\n"
    )

# ------------------------------
# Inline-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ------------------------------
async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_menu":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
            ],
            [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
        return

    elif data in ["period_today", "period_7days", "period_month"]:
        if data == "period_today":
            d_str = datetime.now().strftime("%Y-%m-%d")
            date_from = f"{d_str} 00:00"
            date_to = f"{d_str} 23:59"
            label = "–°–µ–≥–æ–¥–Ω—è"
        elif data == "period_7days":
            end_ = datetime.now().date()
            start_ = end_ - timedelta(days=6)
            date_from = f"{start_} 00:00"
            date_to = f"{end_} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        elif data == "period_month":
            end_ = datetime.now().date()
            start_ = end_ - timedelta(days=29)
            date_from = f"{start_} 00:00"
            date_to = f"{end_} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        await show_stats_screen(query, context, date_from, date_to, label)
        return

    elif data == "period_custom":
        txt = (
            "üóì –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (YYYY-MM-DD,YYYY-MM-DD)\n"
            "–ü—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è."
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
        ])
        await query.edit_message_text(txt, parse_mode="HTML", reply_markup=kb)
        context.user_data["awaiting_period"] = True
        context.user_data["inline_msg_id"] = query.message.message_id
        return

    elif data == "back_periods":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
            ],
            [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
        return

    elif data.startswith("metrics|"):
        uniq_id = data.split("|")[1]
        store = context.user_data.get("stats_store", {}).get(uniq_id)
        if not store:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        base_text = store["base_text"]
        c_ = store["clicks"]
        uc_ = store["unique"]
        r_ = store["reg"]
        f_ = store["ftd"]
        rd_ = store["rd"]
        confp = store["confp"]
        metrics_txt = build_metrics(c_, uc_, r_, f_, confp, rd_)
        final_txt = base_text + "\n" + metrics_txt
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"hide|{uniq_id}")],
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
        ])
        await query.edit_message_text(final_txt, parse_mode="HTML", reply_markup=kb)
        return

    elif data.startswith("hide|"):
        uniq_id = data.split("|")[1]
        st_ = context.user_data.get("stats_store", {}).get(uniq_id)
        if not st_:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"metrics|{uniq_id}")],
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
        ])
        await query.edit_message_text(st_["base_text"], parse_mode="HTML", reply_markup=kb)
        return

    elif data.startswith("update|"):
        uniq_id = data.split("|")[1]
        store = context.user_data.get("stats_store", {}).get(uniq_id)
        if not store:
            await query.edit_message_text("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
            return
        date_from = store.get("date_from")
        date_to = store.get("date_to")
        label = store.get("label")
        if not (date_from and date_to and label):
            await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", parse_mode="HTML")
            return
        await show_stats_screen(query, context, date_from, date_to, label)
        return

    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML")

# ------------------------------
# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ------------------------------
async def show_stats_screen(query, context, date_from: str, date_to: str, label: str):
    okc, cinfo = await get_common_data_aggregated(date_from, date_to)
    if not okc:
        text = f"‚ùó {cinfo}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return
    cc = cinfo["click_count"]
    uc = cinfo["click_unique"]
    confc = cinfo["conf_count"]
    confp = cinfo["conf_payout"]

    okr, rdata = await get_rfr_aggregated(date_from, date_to)
    if not okr:
        text = f"‚ùó {rdata}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return
    reg = rdata["registration"]
    ftd = rdata["ftd"]
    rd = rdata["rdeposit"]

    date_lbl = f"{date_from[:10]} .. {date_to[:10]}"
    base_text = build_stats_text(label, date_lbl, cc, uc, reg, ftd, rd, confc, confp)

    if "stats_store" not in context.user_data:
        context.user_data["stats_store"] = {}
    uniq_id = str(uuid.uuid4())[:8]
    context.user_data["stats_store"][uniq_id] = {
        "base_text": base_text,
        "clicks": cc,
        "unique": uc,
        "reg": reg,
        "ftd": ftd,
        "rd": rd,
        "date_from": date_from,
        "date_to": date_to,
        "label": label,
        "confp": confp
    }

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"metrics|{uniq_id}")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update|{uniq_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_periods")]
    ])
    await query.edit_message_text(base_text, parse_mode="HTML", reply_markup=kb)

# ------------------------------
# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç (–°–≤–æ–π –ø–µ—Ä–∏–æ–¥)
# ------------------------------

async def period_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_access(update):
        return
    
    if not context.user_data.get("awaiting_period"):
        return
    
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    txt = update.message.text.strip()
    logger.info(f"–í–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞: {txt}")
    
    if txt.lower() == "–Ω–∞–∑–∞–¥":
        context.user_data["awaiting_period"] = False
        inline_id = context.user_data.get("inline_msg_id")
        if inline_id:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                 InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                 InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
                [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
            ])
            await telegram_app.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=inline_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                parse_mode="HTML",
                reply_markup=kb
            )
        context.user_data.pop("inline_msg_id", None)
        context.user_data["awaiting_period"] = False
        return
    
    parts = txt.split(",")
    if len(parts) != 2:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: YYYY-MM-DD,YYYY-MM-DD –∏–ª–∏ '–ù–∞–∑–∞–¥'")
        context.user_data["awaiting_period"] = False
        return
    
    try:
        st_d = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
        ed_d = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
    except:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç.")
        context.user_data["awaiting_period"] = False
        return
    
    if st_d > ed_d:
        await update.message.reply_text("‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
        context.user_data["awaiting_period"] = False
        return
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    context.user_data["awaiting_period"] = False
    inline_id = context.user_data.pop("inline_msg_id", None)
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ inline_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not inline_id:
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    date_from = f"{st_d} 00:00"
    date_to = f"{ed_d} 23:59"
    lbl = "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    chat_id = update.effective_chat.id
    try:
        await show_stats_screen(update.callback_query, context, date_from, date_to, lbl)
    except AttributeError:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query, —Å–æ–∑–¥–∞–µ–º FakeQ —Å chat_id –∏ inline_id
        fquery = FakeQ(inline_id, chat_id)
        await show_stats_screen(fquery, context, date_from, date_to, lbl)


# ------------------------------
# Reply-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
# ------------------------------
async def reply_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_access(update):
        return

    text = update.message.text.strip()
    known_commands = ["üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–õ–ö –ü–ü", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    
    if text not in known_commands:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    if text == "–õ–ö –ü–ü":
        link = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://cabinet.4rabetpartner.com/statistics"
        await update.message.reply_text(link, parse_mode="HTML", reply_markup=get_main_menu())
    elif text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
             InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
             InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        mk = get_main_menu()
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML", reply_markup=get_main_menu())

# ------------------------------
# FakeQ –∫–ª–∞—Å—Å
# ------------------------------
class FakeQ:
    def __init__(self, msg_id, chat_id):
        self.message = type("Msg", (), {})()
        self.message.message_id = msg_id
        self.message.chat_id = chat_id

    async def edit_message_text(self, *args, **kwargs):
        return await telegram_app.bot.edit_message_text(
            chat_id=self.message.chat_id,
            message_id=self.message.message_id,
            *args, **kwargs
        )

    async def answer(self):
        pass
# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(MessageHandler(filters.Regex("^üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø$"), request_access_handler), group=0)
telegram_app.add_handler(CallbackQueryHandler(admin_access_callback, pattern="^access\\|"))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, api_key_handler), group=1)
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, period_text_handler), group=1)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_button_handler), group=2)
telegram_app.add_handler(CallbackQueryHandler(inline_handler))

# ------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
