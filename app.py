import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")  # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äì –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ "API-KEY"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/v1"  # URL API Alanbase
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
application = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_application():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await application.initialize()
    await application.start()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
# ------------------------------
app = FastAPI()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    update = Update.de_json(data, application.bot)

    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ ‚Äì –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if not application.running:
        logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        await init_application()

    try:
        await application.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
# ------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è"],
        ["üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        text = update.message.text
    else:
        return

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äì —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∫–ª—é—á –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ "API-KEY"
    headers = {
        "API-KEY": API_KEY,
        "Content-Type": "application/json"
    }

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    if text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        period_keyboard = [["–ó–∞ —á–∞—Å", "–ó–∞ –¥–µ–Ω—å"], ["–ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(period_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif text == "–ó–∞ —á–∞—Å" or text == "–ó–∞ –¥–µ–Ω—å":
        now = datetime.now()
        if text == "–ó–∞ —á–∞—Å":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—É)
            date_from = (now - timedelta(hours=1)).strftime("%Y-%m-%d %H:%M")
            date_to = now.strftime("%Y-%m-%d %H:%M")
            group_by = "hour"
        elif text == "–ó–∞ –¥–µ–Ω—å":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—é, API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
            selected_date = now.strftime("%Y-%m-%d 00:00")
            date_from = selected_date
            date_to = selected_date
            group_by = "day"
        
        params = {
            "group_by": group_by,
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/statistic/common —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return

        if response.status_code == 200:
            try:
                data = response.json()
                message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({text}):\n{data}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        
        await update.message.reply_text(message)

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å":
        now = datetime.now()
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å)
        selected_date = now.strftime("%Y-%m-%d 00:00")
        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": selected_date,
            "date_to": selected_date,
            "currency_code": "USD"
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/statistic/common —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return

        if response.status_code == 200:
            try:
                data = response.json()
                message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n{data}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        
        await update.message.reply_text(message)
    
    elif text == "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        await update.message.reply_text("üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    elif text == "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    elif text == "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã":
        await update.message.reply_text("üìà –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –æ—Ñ—Ñ–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    elif text == "–ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        main_keyboard = [
            ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è"],
            ["üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    loop = asyncio.get_event_loop()
    loop.create_task(init_application())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
