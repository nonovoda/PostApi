import os
import logging
import requests
from threading import Thread
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Alanbase Partner API
BASE_API_URL = "https://api.alanbase.com/v1"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
API_HEADERS = {
    "API-KEY": API_KEY,
    "Content-Type": "application/json"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram‚Äë–±–æ—Ç–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# Flask‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤
# ------------------------------
app = Flask(__name__)

@app.route('/postback', methods=['GET', 'POST'])
def postback():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (POST/GET),
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API‚Äë–∫–ª—é—á –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram.
    """
    if request.method == 'POST':
        data = request.get_json() or request.form
    else:
        data = request.args

    if not data:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    if not data.get('api_key'):
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω API‚Äë–∫–ª—é—á"}), 400
    if data.get('api_key') != API_KEY:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API‚Äë–∫–ª—é—á"}), 403

    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown"
    }
    response = requests.post(telegram_url, json=payload)
    if response.status_code == 200:
        return jsonify({"status": "success"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"}), 500

@app.route('/test', methods=['GET'])
def test():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": test_message,
        "parse_mode": "Markdown"
    }
    response = requests.post(telegram_url, json=payload)
    if response.status_code == 200:
        return jsonify({"status": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", "response": response.text}), 500

@app.route('/stats', methods=['GET'])
def stats():
    """
    Endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GET‚Äë–∑–∞–ø—Ä–æ—Å –∫ /partner/statistic/common.
    """
    url = f"{BASE_API_URL}/partner/statistic/common"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        meta = data.get("meta", {})
        stats_message = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        stats_message += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('page', 'N/A')}\n"
        stats_message += f"–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {meta.get('per_page', 'N/A')}\n"
        stats_message += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {meta.get('total_count', 'N/A')}\n"
        stats_message += f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('last_page', 'N/A')}\n"

        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": stats_message,
            "parse_mode": "Markdown"
        }
        tg_response = requests.post(telegram_url, json=payload)
        if tg_response.status_code == 200:
            return jsonify({"status": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}), 200
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram"}), 500
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

@app.route('/wallet', methods=['GET'])
def wallet():
    """
    Endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GET‚Äë–∑–∞–ø—Ä–æ—Å –∫ /partner/wallet.
    """
    url = f"{BASE_API_URL}/partner/wallet"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ –≤ –∫–ª—é—á–µ 'wallet'
        wallet_value = data.get("wallet")
        if wallet_value is None:
            wallet_message = "üí∞ *–ö–æ—à–µ–ª—ë–∫:*\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ API."
        else:
            wallet_message = f"üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫:*\n{wallet_value}"

        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": wallet_message,
            "parse_mode": "Markdown"
        }
        tg_response = requests.post(telegram_url, json=payload)
        if tg_response.status_code == 200:
            return jsonify({"status": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}), 200
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –≤ Telegram", "details": tg_response.text}), 500
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

# ------------------------------
# Telegram Bot —Å inline‚Äë–∫–Ω–æ–ø–∫–∞–º–∏
# ------------------------------
def start(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
    """
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ö–æ—à–µ–ª—ë–∫", callback_data='wallet')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline‚Äë–∫–Ω–æ–ø–∫–∏.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
    """
    query = update.callback_query
    query.answer()
    command = query.data
    text = ""

    if command == 'stats':
        url = f"{BASE_API_URL}/partner/statistic/common"
        response = requests.get(url, headers=API_HEADERS)
        if response.status_code == 200:
            try:
                data = response.json()
                meta = data.get("meta", {})
                text = ("üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n" +
                        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('page', 'N/A')}\n" +
                        f"–ó–∞–ø–∏—Å–µ–π: {meta.get('per_page', 'N/A')}\n" +
                        f"–í—Å–µ–≥–æ: {meta.get('total_count', 'N/A')}\n" +
                        f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('last_page', 'N/A')}\n")
            except requests.exceptions.JSONDecodeError:
                text = "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."
        else:
            text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}"
    elif command == 'wallet':
        url = f"{BASE_API_URL}/partner/wallet"
        response = requests.get(url, headers=API_HEADERS)
        if response.status_code == 200:
            try:
                data = response.json()
                wallet_value = data.get("wallet")
                if wallet_value is None:
                    text = "üí∞ *–ö–æ—à–µ–ª—ë–∫:*\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ API."
                else:
                    text = f"üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫:*\n{wallet_value}"
            except requests.exceptions.JSONDecodeError:
                text = "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."
        else:
            text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—à–µ–ª—å–∫–µ: {response.text}"
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    query.edit_message_text(text=text, parse_mode='Markdown')

def run_telegram_bot():
    """
    –ó–∞–ø—É—Å–∫ Telegram‚Äë–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling.
    """
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    updater.start_polling()
    updater.idle()

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Flask –∏ Telegram‚Äë–±–æ—Ç–∞
# ------------------------------
if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    telegram_thread = Thread(target=run_telegram_bot)
    flask_thread.start()
    telegram_thread.start()
    flask_thread.join()
    telegram_thread.join()
