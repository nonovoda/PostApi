import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx

from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# ------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
# ------------------------------
app = FastAPI()

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (common)
# ------------------------------
async def format_common_stats(data_json, period_label: str) -> str:
    arr = data_json.get("data", [])
    if not arr:
        return f"‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ({period_label})."
    st = arr[0]
    gf = st.get("group_fields", [])
    date_info = gf[0].get("label") if gf else "N/A"
    clicks = st.get("click_count", 0)
    unique_clicks = st.get("click_unique_count", 0)
    conf = st.get("conversions", {}).get("confirmed", {})
    count_conf = conf.get("count", 0)
    payout_conf = conf.get("payout", 0)

    msg = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})</b>\n\n"
        f"üóì –î–∞—Ç—ã: <i>{date_info}</i>\n\n"
        f"üëÄ –ö–ª–∏–∫–∏: <b>{clicks}</b> (—É–Ω–∏–∫: {unique_clicks})\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ: <b>{count_conf}</b>\n"
        f"üí∞ –î–æ—Ö–æ–¥: <b>{payout_conf} USD</b>\n"
    )
    return msg

# ------------------------------
# –ó–∞–ø—Ä–æ—Å /common
# ------------------------------
async def get_common_data(date_from: str, date_to: str):
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å /partner/statistic/common, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, data | error_str).
    """
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code": "USD"
                }
            )
        if resp.status_code == 200:
            return True, resp.json()
        else:
            return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ /common: {resp.status_code}, {resp.text}"
    except Exception as e:
        return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# ------------------------------
# –°—É–º–º–∞—Ä–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ 4 —Ü–µ–ª—è–º
# ------------------------------
async def get_goals_detail(date_from: str, date_to: str):
    """
    –°—É–º–º–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏/payout –ø–æ goal_keys[]= registration, ftd, bet, rdeposit
    """
    base_params = [
        ("timezone", "Europe/Moscow"),
        ("date_from", date_from),
        ("date_to", date_to),
        ("per_page", "500"),
    ]
    for g in ["registration", "ftd", "bet", "rdeposit"]:
        base_params.append(("goal_keys[]", g))

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY},
                params=base_params
            )
        if resp.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {resp.status_code}, {resp.text}"

        data = resp.json().get("data", [])
        if not data:
            return "‚ùó –ù–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ —ç—Ç–∏–º —Ü–µ–ª—è–º."

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
        goals_map = {
            "registration": {"count": 0, "payout": 0},
            "ftd": {"count": 0, "payout": 0},
            "bet": {"count": 0, "payout": 0},
            "rdeposit": {"count": 0, "payout": 0},
        }
        for c in data:
            gk = c.get("goal", {}).get("key")
            if gk in goals_map:
                goals_map[gk]["count"] += 1
                goals_map[gk]["payout"] += float(c.get("payout", 0))

        txt = "<b>–û–±—â–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</b>\n\n"
        emoji = {
            "registration": "üÜï",
            "ftd": "üíµ",
            "bet": "üé∞",
            "rdeposit": "üîÑ",
        }
        for k, val in goals_map.items():
            txt += (
                f"{emoji.get(k,'')} <b>{k}</b>: {val['count']} —à—Ç., payout <i>{val['payout']}</i>\n"
            )
        return txt
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ POSTBACK (–∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
# ------------------------------
async def process_postback_data(data: dict):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç ¬´–Ω–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è¬ª:
    """
    logger.debug(f"Postback data: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id2 = data.get("sub_id2", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    conversion_date = data.get("conversion_date", "N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id2}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conversion_date}</i>"
    )

    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–±–µ–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

    return {"status": "ok"}

# ------------------------------
# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
# ------------------------------
@app.api_route("/webhook", methods=["GET","POST"])
async def webhook_handler(request: Request):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook: –ª–∏–±–æ Telegram update, –ª–∏–±–æ postback (GET/POST).
    """
    if request.method == "GET":
        # postback GET
        data = dict(request.query_params)
        return await process_postback_data(data)

    # –ò–Ω–∞—á–µ POST
    try:
        data = await request.json()
        if "update_id" in data:
            # Telegram update
            update = Update.de_json(data, telegram_app.bot)
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
            return {"status": "ok"}
        else:
            # postback
            return await process_postback_data(data)
    except:
        return {"status": "ok"}

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# ------------------------------
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_telegram_app():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_id)
        except:
            pass

    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    mk = get_main_menu()
    sent = await update.message.reply_text(text, parse_mode="HTML", reply_markup=mk)
    context.user_data["last_msg_id"] = sent.message_id

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ Reply-–∫–Ω–æ–ø–æ–∫
# ------------------------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await asyncio.sleep(1)
    try:
        await update.message.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_id)
        except:
            pass

    text = update.message.text.strip()

    if text == "–õ–ö –ü–ü":
        link_msg = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://cabinet.4rabetpartner.com/statistics"
        sent = await update.message.reply_text(link_msg, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
            ],
            [
                InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        sent = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        mk = get_main_menu()
        msg = await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = msg.message_id
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    msg = await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML", reply_markup=get_main_menu())
    context.user_data["last_msg_id"] = msg.message_id

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
# ------------------------------
async def inline_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    logger.debug(f"Callback data: {data}")

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_mainmenu":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", parse_mode="HTML")
        await query.edit_message_reply_markup(None)
        mk = get_main_menu()
        sent = await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = sent.message_id
        return

    # –ì–æ—Ç–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    if data == "period_today":
        d_str = datetime.now().strftime("%Y-%m-%d")
        date_from = f"{d_str} 00:00"
        date_to   = f"{d_str} 23:59"
        label     = "–°–µ–≥–æ–¥–Ω—è"
        await show_common_stat(query, context, date_from, date_to, label)
        return

    elif data == "period_7days":
        end_d = datetime.now().date()
        start_d = end_d - timedelta(days=6)
        date_from = f"{start_d} 00:00"
        date_to   = f"{end_d} 23:59"
        label     = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        await show_common_stat(query, context, date_from, date_to, label)
        return

    elif data == "period_month":
        end_d = datetime.now().date()
        start_d = end_d - timedelta(days=30)
        date_from = f"{start_d} 00:00"
        date_to   = f"{end_d} 23:59"
        label     = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        await show_common_stat(query, context, date_from, date_to, label)
        return

    elif data == "period_custom":
        # –ü–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Çy –≤—Ä—É—á–Ω—É—é
        txt = (
            "<b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b> (YYYY-MM-DD,YYYY-MM-DD)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–∞–∑–∞–¥\""
        )
        await query.edit_message_text(txt, parse_mode="HTML", reply_markup=None)
        # –ó–∞–¥–∞—ë–º —Ñ–ª–∞–≥, —á—Ç–æ –∂–¥—ë–º —Ç–µ–∫—Å—Ç
        context.user_data["awaiting_custom_period"] = True
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        context.user_data["inline_msg_id"] = query.message.message_id
        return

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    if data.startswith("details|"):
        parts = data.split("|")
        date_from = parts[1]
        date_to   = parts[2]
        label     = parts[3]
        detail = await get_goals_detail(date_from, date_to)
        txt_out = f"<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ({label})</b>\n\n{detail}"
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"common_back|{date_from}|{date_to}|{label}")
            ]
        ])
        await query.edit_message_text(txt_out, parse_mode="HTML", reply_markup=kb)
        return

    if data.startswith("common_back|"):
        # –í–µ—Ä–Ω—ë–º—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ /common
        parts = data.split("|")
        date_from = parts[1]
        date_to   = parts[2]
        label     = parts[3]
        await show_common_stat(query, context, date_from, date_to, label)
        return

    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML")

# ------------------------------
# –ü–æ–∫–∞–∑ /common + –∫–Ω–æ–ø–∫–∞ "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
# ------------------------------
async def show_common_stat(query, context, date_from: str, date_to: str, label: str):
    ok, data_or_error = await get_common_data(date_from, date_to)
    if not ok:
        text = str(data_or_error)
    else:
        text = await format_common_stats(data_or_error, label)

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data=f"details|{date_from}|{date_to}|{label}")
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
        ]
    ])
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–≤–æ–π –ø–µ—Ä–∏–æ–¥)
# ------------------------------
async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_custom_period"):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª "–ù–∞–∑–∞–¥"
        text = update.message.text.strip()
        if text.lower() == "–Ω–∞–∑–∞–¥":
            context.user_data["awaiting_custom_period"] = False
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            inline_msg_id = context.user_data["inline_msg_id"]
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                    InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                    InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
                ],
                [
                    InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
                ],
                [
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
                ]
            ])
            await update.message.delete()
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=inline_msg_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    parse_mode="HTML",
                    reply_markup=kb
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
            return

        # –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        parts = text.split(",")
        if len(parts) != 2:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ YYYY-MM-DD,YYYY-MM-DD –∏–ª–∏ '–ù–∞–∑–∞–¥'"
            )
            return
        try:
            start_d = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
            end_d   = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        except:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ '–ù–∞–∑–∞–¥'."
            )
            return

        if start_d > end_d:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ '–ù–∞–∑–∞–¥'."
            )
            return

        context.user_data["awaiting_custom_period"] = False
        inline_msg_id = context.user_data["inline_msg_id"]
        await update.message.delete()

        date_from = f"{start_d} 00:00"
        date_to   = f"{end_d} 23:59"
        label     = f"{start_d} - {end_d}"

        # –î–µ–ª–∞–µ–º /common
        ok, data_or_error = await get_common_data(date_from, date_to)
        if not ok:
            text_final = str(data_or_error)
        else:
            text_final = await format_common_stats(data_or_error, label)

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data=f"details|{date_from}|{date_to}|{label}")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=inline_msg_id,
                text=text_final,
                parse_mode="HTML",
                reply_markup=kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ edit_message_text: {e}")
    else:
        # –ù–µ –∂–¥—ë–º –ø–µ—Ä–∏–æ–¥ => –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ Reply-–∫–Ω–æ–ø–∫–∞
        pass

# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–∏–æ–¥:
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler), group=1)
# –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Reply-–∫–Ω–æ–ø–∫–∏:
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler), group=2)
# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:
telegram_app.add_handler(CallbackQueryHandler(inline_button_handler))

# ------------------------------
# –ó–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
