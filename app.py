import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# –ú–µ–Ω—é
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton(text="–õ–ö –ü–ü")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_statistics_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="üóì –ó–∞ –ø–µ—Ä–∏–æ–¥"), KeyboardButton(text="üìÜ –ó–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# ------------------------------
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------------------------
async def format_common_stats(resp_json, period_label: str) -> str:
    # resp_json ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç /partner/statistic/common
    data = resp_json.get("data", [])
    if not data:
        return f"‚ö†Ô∏è –ù–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ({period_label})."

    stat = data[0]
    group_fields = stat.get("group_fields", [])
    date_info = group_fields[0].get("label") if group_fields else "N/A"
    clicks = stat.get("click_count", 0)
    unique_clicks = stat.get("click_unique_count", 0)
    conversions = stat.get("conversions", {}).get("confirmed", {})
    confirmed_count = conversions.get("count", 0)
    confirmed_payout = conversions.get("payout", 0)

    txt = (
        f"<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})</b>\n\n"
        f"üóì <b>–î–∞—Ç–∞(—ã):</b> <i>{date_info}</i>\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> <i>{clicks}</i> (—É–Ω–∏–∫: {unique_clicks})\n"
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{confirmed_count}</i>\n"
        f"üí∞ <b>–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç:</b> <i>{confirmed_payout} USD</i>\n"
    )
    return txt

# ------------------------------
# –°—É–º–º–∞—Ä–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ü–µ–ª—è–º
# ------------------------------
async def get_goals_detail(date_from: str, date_to: str) -> str:
    """
    –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å /partner/statistic/conversions —Å goal_keys[]=registration, ftd, bet, rdeposit
    –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –≤–µ—Ä–Ω–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞:
    Registration: X —à—Ç., payout=Y
    FTD: ...
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_params = [
        ("timezone", "Europe/Moscow"),
        ("date_from", date_from),
        ("date_to", date_to),
        ("per_page", "500"),  # –∑–∞–ø–∞—Å
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
    for g in ["registration", "ftd", "bet", "rdeposit"]:
        base_params.append(("goal_keys[]", g))

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY, "Content-Type": "application/json"},
                params=base_params
            )
        if resp.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (goals): {resp.status_code} {resp.text}"

        data = resp.json().get("data", [])
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
        # –ü—Ä–∏–º–µ—Ä: { 'registration': {'count': 2, 'payout': 10}, 'ftd': {...}, ... }
        goals_map = {
            "registration": {"count": 0, "payout": 0},
            "ftd": {"count": 0, "payout": 0},
            "bet": {"count": 0, "payout": 0},
            "rdeposit": {"count": 0, "payout": 0},
        }
        for c in data:
            g = c.get("goal", {}).get("key")  # registration, ftd, bet, rdeposit
            payout = c.get("payout", 0)
            if g in goals_map:
                goals_map[g]["count"] += 1
                goals_map[g]["payout"] += float(payout)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        txt = "<b>–°—É–º–º–∞—Ä–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ü–µ–ª—è–º</b>:\n"
        # –î–æ–±–∞–≤–∏–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
        emoji_map = {
            "registration": "üÜï",
            "ftd": "üíµ",
            "bet": "üé∞",
            "rdeposit": "üîÑ"
        }
        for key, val in goals_map.items():
            em = emoji_map.get(key, "")
            txt += (
                f"{em} <b>{key}</b>: <i>{val['count']}</i> —à—Ç., payout= <i>{val['payout']}</i>\n"
            )
        return txt

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"

# ------------------------------
# /webhook (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# ------------------------------
@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        if "update_id" in data:
            update = Update.de_json(data, telegram_app.bot)
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
        else:
            pass  # postback
    except:
        pass
    return {"status": "ok"}

# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(1)
    last_msg_id = context.user_data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_msg_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

    main_keyboard = get_main_menu()
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    sent_msg = await update.message.reply_text(text, parse_mode="HTML", reply_markup=main_keyboard)
    context.user_data["last_bot_message_id"] = sent_msg.message_id

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
# ------------------------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await asyncio.sleep(1)
    try:
        await update.message.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_bot_message_id")
    if last_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_id)
        except:
            pass

    text = update.message.text.strip()
    logger.debug(f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞: {text}")

    if text == "–õ–ö –ü–ü":
        link_text = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞: https://cabinet.4rabetpartner.com/statistics"
        msg = await update.message.reply_text(link_text, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        st_menu = get_statistics_menu()
        msg = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", parse_mode="HTML", reply_markup=st_menu)
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        mk = get_main_menu()
        msg = await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    if text == "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è":
        now_str = datetime.now().strftime("%Y-%m-%d")
        date_from = f"{now_str} 00:00"
        date_to = f"{now_str} 23:59"
        period_label = "–ó–∞ —Å–µ–≥–æ–¥–Ω—è"

        # 1) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /common
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(
                    f"{BASE_API_URL}/partner/statistic/common",
                    headers={"API-KEY": API_KEY},
                    params={
                        "group_by": "day",
                        "timezone": "Europe/Moscow",
                        "date_from": date_from,
                        "date_to": date_to,
                        "currency_code": "USD"
                    }
                )
            if resp.status_code == 200:
                data = resp.json()
                comm_str = await format_common_stats(data, period_label)
            else:
                comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ /common: {resp.status_code} {resp.text}"
        except Exception as e:
            comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

        # 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (registration, ftd, bet, rdeposit)
        detail_str = await get_goals_detail(date_from, date_to)

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_txt = comm_str + "\n\n" + detail_str
        msg = await update.message.reply_text(full_txt, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    if text == "üìÜ –ó–∞ –º–µ—Å—è—Ü":
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30)
        date_from = f"{start_date.strftime('%Y-%m-%d')} 00:00"
        date_to = f"{end_date.strftime('%Y-%m-%d')} 23:59"
        period_label = f"–ó–∞ {start_date} - {end_date}"

        # 1) /common
        try:
            # –ú–æ–∂–Ω–æ, –∫–∞–∫ —É –≤–∞—Å, –ø–æ–∫–∞–¥—Ä–æ–≤–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –∑–¥–µ—Å—å —Å–¥–µ–ª–∞–µ–º –µ–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(
                    f"{BASE_API_URL}/partner/statistic/common",
                    headers={"API-KEY": API_KEY},
                    params={
                        "group_by": "day",  # –∏–ª–∏ month, –µ—Å–ª–∏ –Ω–∞–¥–æ
                        "timezone": "Europe/Moscow",
                        "date_from": date_from,
                        "date_to": date_to,
                        "currency_code": "USD"
                    }
                )
            if resp.status_code == 200:
                data = resp.json()
                comm_str = await format_common_stats(data, period_label)
            else:
                comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ /common: {resp.status_code} {resp.text}"
        except Exception as e:
            comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

        # 2) –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–æ–±—â–µ–µ –∫–æ–ª-–≤–æ –∏ payout –ø–æ registration, ftd, bet, rdeposit)
        detail_str = await get_goals_detail(date_from, date_to)

        full_txt = comm_str + "\n\n" + detail_str
        msg = await update.message.reply_text(full_txt, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    if text == "üóì –ó–∞ –ø–µ—Ä–∏–æ–¥":
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—ã
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (YYYY-MM-DD,YYYY-MM-DD):", parse_mode="HTML")
        context.user_data["awaiting_period"] = True
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤—Ä—É—á–Ω—É—é
    if context.user_data.get("awaiting_period"):
        context.user_data["awaiting_period"] = False
        parts = text.split(",")
        if len(parts) != 2:
            msg = await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD,YYYY-MM-DD",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            context.user_data["last_bot_message_id"] = msg.message_id
            return
        try:
            start_d = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
            end_d = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        except:
            msg = await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã.", parse_mode="HTML", reply_markup=get_main_menu())
            context.user_data["last_bot_message_id"] = msg.message_id
            return
        if start_d > end_d:
            msg = await update.message.reply_text("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π!", parse_mode="HTML", reply_markup=get_main_menu())
            context.user_data["last_bot_message_id"] = msg.message_id
            return

        date_from = f"{start_d} 00:00"
        date_to = f"{end_d} 23:59"
        period_label = f"{start_d} - {end_d}"

        # /common
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(
                    f"{BASE_API_URL}/partner/statistic/common",
                    headers={"API-KEY": API_KEY},
                    params={
                        "group_by": "day",
                        "timezone": "Europe/Moscow",
                        "date_from": date_from,
                        "date_to": date_to,
                        "currency_code": "USD"
                    }
                )
            if resp.status_code == 200:
                data = resp.json()
                comm_str = await format_common_stats(data, period_label)
            else:
                comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ /common: {resp.status_code} {resp.text}"
        except Exception as e:
            comm_str = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        detail_str = await get_goals_detail(date_from, date_to)
        full_txt = comm_str + "\n\n" + detail_str
        msg = await update.message.reply_text(full_txt, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_bot_message_id"] = msg.message_id
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    msg = await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", parse_mode="HTML", reply_markup=get_main_menu())
    context.user_data["last_bot_message_id"] = msg.message_id

# ------------------------------
# /start
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

# ------------------------------
# –ó–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(telegram_app.initialize())
    loop.create_task(telegram_app.start())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
