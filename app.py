import os
import logging
import requests
from threading import Thread
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Alanbase Partner API
BASE_API_URL = "https://api.alanbase.com/api/v1"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (—Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º User-Agent)
API_HEADERS = {
    "API-KEY": API_KEY,
    "Content-Type": "application/json",
    "User-Agent": "AlanbaseTelegramBot/1.0"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# Flask API (–ü–æ—Å—Ç–±–µ–∫–∏ + –¢–µ—Å—Ç + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –ë–∞–ª–∞–Ω—Å + –û—Ñ—Ñ–µ—Ä—ã)
# ------------------------------
app = Flask(__name__)

@app.route('/postback', methods=['GET', 'POST'])
def postback():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ Telegram."""
    data = request.get_json() or request.args
    if not data:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    if not data.get('api_key'):
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω API-–∫–ª—é—á"}), 400
    if data.get('api_key') != API_KEY:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}), 403

    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message_text, "parse_mode": "Markdown"}
    requests.post(telegram_url, json=payload)
    return jsonify({"status": "success"}), 200

@app.route('/test', methods=['GET'])
def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": test_message, "parse_mode": "Markdown"}
    requests.post(telegram_url, json=payload)
    return jsonify({"status": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}), 200

@app.route('/stats', methods=['GET'])
def stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ Telegram."""
    url = f"{BASE_API_URL}/partner/statistic/common"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        meta = data.get("meta", {})
        stats_message = (
            "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('page', 'N/A')}\n"
            f"–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {meta.get('per_page', 'N/A')}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {meta.get('total_count', 'N/A')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('last_page', 'N/A')}\n"
        )

        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": stats_message, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

@app.route('/balance', methods=['GET'])
def balance():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å (—Ç–æ–ª—å–∫–æ USD) –∏–∑ API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram."""
    url = f"{BASE_API_URL}/partner/balance"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        balances = data.get("data", [])
        balance_usd = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        for entry in balances:
            if entry.get("currency_code") == "USD":
                balance_usd = entry.get("balance", 0)

        balance_text = f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å (USD):* {balance_usd}"
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": balance_text, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

@app.route('/offers', methods=['GET'])
def offers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–∑ API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram."""
    url = f"{BASE_API_URL}/partner/offers"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "raw_response": response.text}), 500

        offers_list = data.get("data", [])
        meta = data.get("meta", {})
        if not offers_list:
            offers_text = "‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            offers_text = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤:*\n"
            offers_text += f"–í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {meta.get('total_count', 'N/A')}\n"
            # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–µ 3 –æ—Ñ—Ñ–µ—Ä–∞
            for offer in offers_list[:3]:
                name = offer.get("name", "N/A")
                offer_id = offer.get("id", "N/A")
                offers_text += f"üîπ {name} (ID: {offer_id})\n"
            if meta.get("total_count", 0) > 3:
                offers_text += "‚Ä¶ –∏ –¥—Ä—É–≥–∏–µ"
        
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": offers_text, "parse_mode": "Markdown"}
        requests.post(telegram_url, json=payload)
        return jsonify({"status": "–û—Ñ—Ñ–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API", "details": response.text}), 500

# ------------------------------
# Telegram-–±–æ—Ç —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
# ------------------------------
def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å (USD)", callback_data='balance')],
        [InlineKeyboardButton("–û—Ñ—Ñ–µ—Ä—ã", callback_data='offers')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ API-–∑–∞–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    query.answer()
    command = query.data
    text = ""

    if command == 'balance':
        text = get_balance()
    elif command == 'stats':
        text = "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ stats()
    elif command == 'offers':
        text = get_offers()
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    query.edit_message_text(text=text, parse_mode='Markdown')

def get_balance():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å USD —á–µ—Ä–µ–∑ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    url = f"{BASE_API_URL}/partner/balance"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API."
        balances = data.get("data", [])
        balance_usd = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        for entry in balances:
            if entry.get("currency_code") == "USD":
                balance_usd = entry.get("balance", 0)
        return f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å (USD):* {balance_usd}"
    else:
        return f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"

def get_offers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    url = f"{BASE_API_URL}/partner/offers"
    response = requests.get(url, headers=API_HEADERS)
    if response.status_code == 200:
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API."
        offers_list = data.get("data", [])
        meta = data.get("meta", {})
        if not offers_list:
            return "‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        offers_text = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤:*\n"
        offers_text += f"–í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {meta.get('total_count', 'N/A')}\n"
        for offer in offers_list[:3]:
            name = offer.get("name", "N/A")
            offer_id = offer.get("id", "N/A")
            offers_text += f"üîπ {name} (ID: {offer_id})\n"
        if meta.get("total_count", 0) > 3:
            offers_text += "‚Ä¶ –∏ –¥—Ä—É–≥–∏–µ"
        return offers_text
    else:
        return f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling."""
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    updater.start_polling()
    updater.idle()

# ------------------------------
# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
# ------------------------------
def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    telegram_thread = Thread(target=run_telegram_bot)
    flask_thread.start()
    telegram_thread.start()
    flask_thread.join()
    telegram_thread.join()
