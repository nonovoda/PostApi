import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (Application, CommandHandler, MessageHandler, filters,
                          ContextTypes, ConversationHandler)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logger.debug(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: PP_API_KEY = {API_KEY[:4]+'****' if API_KEY != '–í–ê–®_API_–ö–õ–Æ–ß' else API_KEY}, "
             f"TELEGRAM_TOKEN = {TELEGRAM_TOKEN[:4]+'****' if TELEGRAM_TOKEN != '–í–ê–®_–¢–û–ö–ï–ù' else TELEGRAM_TOKEN}, "
             f"TELEGRAM_CHAT_ID = {TELEGRAM_CHAT_ID}")

# ------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
# ------------------------------
app = FastAPI()

def get_main_menu():
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_statistics_menu():
    # –ü–æ–¥–º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —ç–º–æ–¥–∑–∏
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="üóì –ó–∞ –ø–µ—Ä–∏–æ–¥"), KeyboardButton(text="üìÜ –ó–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_calculator_menu():
    # –ü–æ–¥–º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å —á–µ—Ç—ã—Ä—å–º—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(text="üìà ROI"), KeyboardButton(text="üíπ EPC")],
            [KeyboardButton(text="üõí –°–ß"), KeyboardButton(text="üí∏ CPA")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (HTML —Ñ–æ—Ä–º–∞—Ç)
# ------------------------------
async def format_statistics(response_json, period_label: str) -> str:
    data = response_json.get("data", [])
    if not data:
        return "‚ö†Ô∏è <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</i>"
    stat = data[0]
    group_fields = stat.get("group_fields", [])
    date_info = group_fields[0].get("label") if group_fields else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    clicks = stat.get("click_count", "N/A")
    unique_clicks = stat.get("click_unique_count", "N/A")
    conversions = stat.get("conversions", {})
    confirmed = conversions.get("confirmed", {})

    message = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})</b>\n\n"
        f"<b>–î–∞—Ç–∞:</b> <i>{date_info}</i>\n\n"
        f"<b>–ö–ª–∏–∫–∏:</b>\n"
        f"‚Ä¢ <b>–í—Å–µ–≥–æ:</b> <i>{clicks}</i>\n"
        f"‚Ä¢ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ:</b> <i>{unique_clicks}</i>\n\n"
        f"<b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>\n"
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ:</b> <i>{confirmed.get('count', 'N/A')}</i>\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> <i>{confirmed.get('payout', 'N/A')} USD</i>\n"
    )
    return message

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_telegram_app():
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.debug("Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±–µ–∫–æ–≤ (HTML —Ñ–æ—Ä–º–∞—Ç)
# ------------------------------
async def postback_handler(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç–±–µ–∫: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id2 = data.get("sub_id2", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    conversion_date = data.get("conversion_date", "N/A")

    message = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id2}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conversion_date}</i>"
    )

    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        logger.debug("–ü–æ—Å—Ç–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–±–µ–∫–∞ –≤ Telegram: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

    return {"status": "ok"}

# ------------------------------
# –ï–¥–∏–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Telegram –∏ –ø–æ—Å—Ç–±–µ–∫–∏)
# ------------------------------
@app.post("/webhook")
async def webhook_handler(request: Request):
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = await request.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    if "update_id" in data:
        update = Update.de_json(data, telegram_app.bot)
        if not telegram_app.running:
            logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            await init_telegram_app()
        try:
            await telegram_app.process_update(update)
            return {"status": "ok"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500
    else:
        return await postback_handler(request)

# ==============================
# –ö–û–ù–í–ï–†–°–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê "–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†"
# ==============================

# --- ROI ---
ROI_INVEST, ROI_INCOME = range(2)

async def roi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:")
    return ROI_INVEST

async def roi_investment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        investment = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —á–∏—Å–ª–æ–º:")
        return ROI_INVEST
    context.user_data["investment"] = investment
    await update.message.reply_text("üìà –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:")
    return ROI_INCOME

async def roi_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        income = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ —á–∏—Å–ª–æ–º:")
        return ROI_INCOME
    investment = context.user_data.get("investment")
    if not investment:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω–∞ —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.")
        return ConversationHandler.END
    roi = ((income - investment) / investment) * 100 if investment != 0 else 0
    await update.message.reply_text(f"üìà ROI: {roi:.2f}%")
    return ConversationHandler.END

async def roi_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

roi_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üìà ROI$'), roi_command)],
    states={
        ROI_INVEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, roi_investment)],
        ROI_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, roi_income)],
    },
    fallbacks=[CommandHandler("cancel", roi_cancel)]
)

# --- EPC ---
EPC_INCOME, EPC_CLICKS = range(2)

async def epc_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíπ –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:")
    return EPC_INCOME

async def epc_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        income = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ —á–∏—Å–ª–æ–º:")
        return EPC_INCOME
    context.user_data["income"] = income
    await update.message.reply_text("üíπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:")
    return EPC_CLICKS

async def epc_clicks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        clicks = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ —á–∏—Å–ª–æ–º:")
        return EPC_CLICKS
    income = context.user_data.get("income")
    if clicks == 0:
        await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º.")
        return ConversationHandler.END
    epc = income / clicks
    await update.message.reply_text(f"üíπ EPC: {epc:.2f}")
    return ConversationHandler.END

async def epc_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíπ EPC-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

epc_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üíπ EPC$'), epc_command)],
    states={
        EPC_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, epc_income)],
        EPC_CLICKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, epc_clicks)],
    },
    fallbacks=[CommandHandler("cancel", epc_cancel)]
)

# --- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–°–ß) ---
SC_FIRST, SC_REPEAT, SC_COUNT = range(3)

async def sc_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõí –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:")
    return SC_FIRST

async def sc_first(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        first = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–∏—Å–ª–æ–º:")
        return SC_FIRST
    context.user_data["first"] = first
    await update.message.reply_text("üõí –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:")
    return SC_REPEAT

async def sc_repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        repeat = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–∏—Å–ª–æ–º:")
        return SC_REPEAT
    context.user_data["repeat"] = repeat
    await update.message.reply_text("üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:")
    return SC_COUNT

async def sc_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —á–∏—Å–ª–æ–º:")
        return SC_COUNT
    first = context.user_data.get("first")
    repeat = context.user_data.get("repeat")
    if count == 0:
        await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º.")
        return ConversationHandler.END
    avg = (first + repeat) / count
    await update.message.reply_text(f"üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg:.2f}")
    return ConversationHandler.END

async def sc_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõí –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

sc_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üõí –°–ß$'), sc_command)],
    states={
        SC_FIRST: [MessageHandler(filters.TEXT & ~filters.COMMAND, sc_first)],
        SC_REPEAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sc_repeat)],
        SC_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sc_count)],
    },
    fallbacks=[CommandHandler("cancel", sc_cancel)]
)

# --- CPA ---
CPA_COST, CPA_CONVERSIONS = range(2)

async def cpa_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã:")
    return CPA_COST

async def cpa_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cost = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã —á–∏—Å–ª–æ–º:")
        return CPA_COST
    context.user_data["cost"] = cost
    await update.message.reply_text("üí∏ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π:")
    return CPA_CONVERSIONS

async def cpa_conversions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        convs = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π —á–∏—Å–ª–æ–º:")
        return CPA_CONVERSIONS
    cost = context.user_data.get("cost")
    if convs == 0:
        await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º.")
        return ConversationHandler.END
    cpa = cost / convs
    await update.message.reply_text(f"üí∏ CPA: {cpa:.2f}")
    return ConversationHandler.END

async def cpa_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∏ CPA-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

cpa_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üí∏ CPA$'), cpa_command)],
    states={
        CPA_COST: [MessageHandler(filters.TEXT & ~filters.COMMAND, cpa_cost)],
        CPA_CONVERSIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, cpa_conversions)],
    },
    fallbacks=[CommandHandler("cancel", cpa_cancel)]
)

# ==============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π MessageHandler)
# ==============================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = get_main_menu()
    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    sent_msg = await update.message.reply_text(text, reply_markup=main_keyboard, parse_mode="HTML")
    context.user_data["last_bot_message_id"] = sent_msg.message_id

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    try:
        await update.message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    last_msg_id = context.user_data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await update.message.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_msg_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

    text = update.message.text.strip()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        reply_markup = get_statistics_menu()
        sent_msg = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup, parse_mode="HTML")
        context.user_data["last_bot_message_id"] = sent_msg.message_id
        return
    if text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        reply_markup = get_calculator_menu()
        sent_msg = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:", reply_markup=reply_markup, parse_mode="HTML")
        context.user_data["last_bot_message_id"] = sent_msg.message_id
        return
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        reply_markup = get_main_menu()
        sent_msg = await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup, parse_mode="HTML")
        context.user_data["last_bot_message_id"] = sent_msg.message_id
        return

    sent_msg = await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML", reply_markup=get_main_menu())
    context.user_data["last_bot_message_id"] = sent_msg.message_id

# ==============================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
# ==============================
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(roi_conv_handler)
telegram_app.add_handler(epc_conv_handler)
telegram_app.add_handler(sc_conv_handler)
telegram_app.add_handler(cpa_conv_handler)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
