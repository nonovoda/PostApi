import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logger.debug(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: PP_API_KEY = {API_KEY[:4]+'****' if API_KEY != '–í–ê–®_API_–ö–õ–Æ–ß' else API_KEY}, TELEGRAM_TOKEN = {TELEGRAM_TOKEN[:4]+'****' if TELEGRAM_TOKEN != '–í–ê–®_–¢–û–ö–ï–ù' else TELEGRAM_TOKEN}, TELEGRAM_CHAT_ID = {TELEGRAM_CHAT_ID}")

# ------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
# ------------------------------
app = FastAPI()

# ------------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------------------------
def format_statistics(response_json, period_label: str) -> str:
    data = response_json.get("data", [])
    meta = response_json.get("meta", {})
    
    if not data:
        return "‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    stat = data[0]
    group_fields = stat.get("group_fields", [])
    date_info = group_fields[0].get("label") if group_fields else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    clicks = stat.get("click_count", "N/A")
    unique_clicks = stat.get("click_unique_count", "N/A")
    
    conversions = stat.get("conversions", {})
    confirmed = conversions.get("confirmed", {})
    pending = conversions.get("pending", {})
    hold = conversions.get("hold", {})
    rejected = conversions.get("rejected", {})
    total = conversions.get("total", {})
    
    message = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})* üìä\n\n"
        f"üóì –î–∞—Ç–∞: *{date_info}*\n\n"
        f"üñ±Ô∏è –ö–ª–∏–∫–∏: *{clicks}*\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏: *{unique_clicks}*\n\n"
        f"üîÑ *–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:*\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ: *{confirmed.get('count', 'N/A')}* (üí∞ {confirmed.get('payout', 'N/A')} USD)\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ: *{pending.get('count', 'N/A')}* (üí∞ {pending.get('payout', 'N/A')} USD)\n"
        f"üîí –í —É–¥–µ—Ä–∂–∞–Ω–∏–∏: *{hold.get('count', 'N/A')}* (üí∞ {hold.get('payout', 'N/A')} USD)\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: *{rejected.get('count', 'N/A')}* (üí∞ {rejected.get('payout', 'N/A')} USD)\n"
        f"üí∞ –í—Å–µ–≥–æ: *{total.get('count', 'N/A')}* (–°—É–º–º–∞: {total.get('payout', 'N/A')} USD)\n\n"
        f"‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞: *{meta.get('page', 'N/A')}* / –ü–æ—Å–ª–µ–¥–Ω—è—è: *{meta.get('last_page', 'N/A')}* | –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: *{meta.get('total_count', 'N/A')}*"
    )
    return message

def format_offers(response_json) -> str:
    offers = response_json.get("data", [])
    meta = response_json.get("meta", {})
    if not offers:
        return "‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    message = "üìà *–¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã:*\n\n"
    for offer in offers:
        message += f"‚Ä¢ *ID:* {offer.get('id')} | *–ù–∞–∑–≤–∞–Ω–∏–µ:* {offer.get('name')}\n"
    message += f"\n‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta.get('page', 'N/A')} / –í—Å–µ–≥–æ: {meta.get('total_count', 'N/A')}"
    return message

def format_conversion(response_json) -> str:
    data = response_json.get("data", [])
    if not data:
        return "‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    conv = data[0]
    message = (
        f"üöÄ *–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è:*\n\n"
        f"ID: {conv.get('conversion_id', 'N/A')}\n"
        f"–°—Ç–∞—Ç—É—Å: {conv.get('status', 'N/A')}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {conv.get('decline_reason', 'N/A')}\n"
        f"–î–∞—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {conv.get('conversion_datetime', 'N/A')}\n"
        f"–ú–æ–¥–µ–ª—å –æ–ø–ª–∞—Ç—ã: {conv.get('payment_model', 'N/A')}\n"
        f"–ü–ª–∞—Ç—ë–∂: {conv.get('payout', 'N/A')} {conv.get('payout_currency', 'USD')}\n"
    )
    return message

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_telegram_app():
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.debug("Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Telegram –∏ –ø–æ—Å—Ç–±–µ–∫–∏)
# ------------------------------
@app.post("/webhook")
async def webhook_handler(request: Request):
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = await request.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    # –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç update_id ‚Äì —ç—Ç–æ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if "update_id" in data:
        update = Update.de_json(data, telegram_app.bot)
        if not telegram_app.running:
            logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            await init_telegram_app()
        try:
            await telegram_app.process_update(update)
            return {"status": "ok"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500
    else:
        # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ—Å—Ç–±–µ–∫
        return await postback_handler(request)

# ------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–±–µ–∫–æ–≤ –æ—Ç –ü–ü
# ------------------------------
async def postback_handler(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç–±–µ–∫: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id2 = data.get("sub_id2", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    conversion_date = data.get("conversion_date", "N/A")

    message = (
        "üîî *–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!*\n\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {offer_id}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {sub_id2}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {goal}\n"
        f"üí∞ –í—ã–ø–ª–∞—Ç–∞: {revenue} {currency}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {status}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {sub_id4}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {sub_id5}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {conversion_date}"
    )

    try:
        await telegram_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode="Markdown")
        logger.debug("–ü–æ—Å—Ç–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–±–µ–∫–∞ –≤ Telegram: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

    return {"status": "ok"}

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
# ------------------------------
def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è"],
        ["üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    headers = {
        "API-KEY": API_KEY,
        "Content-Type": "application/json",
        "User-Agent": "TelegramBot/1.0 (compatible; Alanbase API integration)"
    }
    now = datetime.now()
    
    if text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        period_keyboard = [["–ó–∞ —á–∞—Å", "–ó–∞ –¥–µ–Ω—å"], ["–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é"], ["–ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(period_keyboard, resize_keyboard=True, one_time_keyboard=True)
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)
    
    elif text in ["–ó–∞ —á–∞—Å", "–ó–∞ –¥–µ–Ω—å", "–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é"]:
        period_label = text
        if text == "–ó–∞ —á–∞—Å":
            date_from = (now - timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S")
            date_to = now.strftime("%Y-%m-%d %H:%M:%S")
            group_by = "hour"
        elif text == "–ó–∞ –¥–µ–Ω—å":
            selected_date = now.strftime("%Y-%m-%d 00:00:00")
            date_from = selected_date
            date_to = selected_date
            group_by = "day"
        elif text == "–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é":
            weekday = now.weekday()
            last_monday = now - timedelta(days=weekday + 7)
            date_from = last_monday.replace(hour=0, minute=0, second=0).strftime("%Y-%m-%d %H:%M:%S")
            last_sunday = last_monday + timedelta(days=6)
            date_to = last_sunday.replace(hour=23, minute=59, second=59).strftime("%Y-%m-%d %H:%M:%S")
            group_by = "hour"
        
        params = {
            "group_by": group_by,
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/statistic/common —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params} –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {headers}")
        try:
            response = httpx.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params, timeout=10)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return

        if response.status_code == 200:
            try:
                data = response.json()
                message = format_statistics(data, period_label)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        
        update.message.reply_text(message, parse_mode="Markdown")
    
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å":
        selected_date = now.strftime("%Y-%m-%d 00:00:00")
        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": selected_date,
            "date_to": selected_date,
            "currency_code": "USD"
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å' —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            response = httpx.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params, timeout=10)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return
        
        if response.status_code == 200:
            try:
                data = response.json()
                message = format_statistics(data, "–ó–∞ –¥–µ–Ω—å")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        update.message.reply_text(message, parse_mode="Markdown")
    
    elif text == "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        date_from = (now - timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S")
        date_to = now.strftime("%Y-%m-%d %H:%M:%S")
        params = {
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/statistic/conversions —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params} –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {headers}")
        try:
            response = httpx.get(f"{BASE_API_URL}/partner/statistic/conversions", headers=headers, params=params, timeout=10)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return
        
        if response.status_code == 200:
            try:
                data = response.json()
                message = format_conversion(data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        
        update.message.reply_text(message, parse_mode="Markdown")
    
    elif text == "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        selected_date = now.strftime("%Y-%m-%d 00:00:00")
        params = {
            "group_by": "offer",
            "timezone": "Europe/Moscow",
            "date_from": selected_date,
            "date_to": selected_date,
            "currency_code": "USD"
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            response = httpx.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params, timeout=10)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return
        
        if response.status_code == 200:
            try:
                data = response.json()
                message = format_statistics(data, "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        update.message.reply_text(message, parse_mode="Markdown")
    
    elif text == "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã":
        params = {
            "is_avaliable": 1,
            "page": 1,
            "per_page": 10
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/offers —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            response = httpx.get(f"{BASE_API_URL}/partner/offers", headers=headers, params=params, timeout=10)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return
        
        if response.status_code == 200:
            try:
                data = response.json()
                message = format_offers(data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        update.message.reply_text(message, parse_mode="Markdown")
    
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    elif text == "–ù–∞–∑–∞–¥":
        main_keyboard = [
            ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è"],
            ["üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True, one_time_keyboard=False)
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    else:
        update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
