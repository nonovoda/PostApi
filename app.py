import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.helpers import escape_markdown

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot.onrender.com/webhook")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logger.debug(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: PP_API_KEY = {API_KEY[:4]+'****' if API_KEY != '–í–ê–®_API_–ö–õ–Æ–ß' else API_KEY}, TELEGRAM_TOKEN = {TELEGRAM_TOKEN[:4]+'****' if TELEGRAM_TOKEN != '–í–ê–®_–¢–û–ö–ï–ù' else TELEGRAM_TOKEN}, TELEGRAM_CHAT_ID = {TELEGRAM_CHAT_ID}")

# ------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
# ------------------------------
app = FastAPI()

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ API
# ------------------------------
async def format_statistics(response_json, period_label: str) -> str:
    data = response_json.get("data", [])
    if not data:
        return "‚ö†Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*"
    stat = data[0]
    group_fields = stat.get("group_fields", [])
    date_info = group_fields[0].get("label") if group_fields else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    clicks = stat.get("click_count", "N/A")
    unique_clicks = stat.get("click_unique_count", "N/A")
    conversions = stat.get("conversions", {})
    confirmed = conversions.get("confirmed", {})
    message = (
        f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})**\n\n"
        f"**–î–∞—Ç–∞:** _{date_info}_\n\n"
        f"**–ö–ª–∏–∫–∏:**\n"
        f"‚Ä¢ **–í—Å–µ–≥–æ:** _{clicks}_\n"
        f"‚Ä¢ **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ:** _{unique_clicks}_\n\n"
        f"**–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:**\n"
        f"‚Ä¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ:** _{confirmed.get('count', 'N/A')}_ (üí∞ _{confirmed.get('payout', 'N/A')} USD_)\n"
    )
    return message

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤ (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)
# ------------------------------
async def format_offers(response_json) -> str:
    offers = response_json.get("data", [])
    if not offers:
        return "‚ö†Ô∏è *–û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*"
    message = "**üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã:**\n\n"
    for offer in offers:
        message += f"‚Ä¢ **ID:** {offer.get('id')} | **–ù–∞–∑–≤–∞–Ω–∏–µ:** {offer.get('name')}\n"
    return message

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_telegram_app():
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.debug("Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±–µ–∫–æ–≤ –æ—Ç –ü–ü (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)
# ------------------------------
async def postback_handler(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç–±–µ–∫: {data}")
    offer_id = data.get("offer_id", "N/A")
    sub_id2 = data.get("sub_id2", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    conversion_date = data.get("conversion_date", "N/A")

    message = (
        "üîî **–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!**\n\n"
        f"**üìå –û—Ñ—Ñ–µ—Ä:** _{offer_id}_\n"
        f"**üõ† –ü–æ–¥—Ö–æ–¥:** _{sub_id2}_\n"
        f"**üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:** _{goal}_\n"
        f"**üí∞ –í—ã–ø–ª–∞—Ç–∞:** _{revenue} {currency}_\n"
        f"**‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:** _{status}_\n"
        f"**üéØ –ö–∞–º–ø–∞–Ω–∏—è:** _{sub_id4}_\n"
        f"**üéØ –ê–¥—Å–µ—Ç:** _{sub_id5}_\n"
        f"**‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:** _{conversion_date}_"
    )

    try:
        # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º escape_markdown –Ω–∞ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äì —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è.
        await telegram_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode="MarkdownV2")
        logger.debug("–ü–æ—Å—Ç–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–±–µ–∫–∞ –≤ Telegram: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

    return {"status": "ok"}

# ------------------------------
# –ï–¥–∏–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Telegram –∏ –ø–æ—Å—Ç–±–µ–∫–∏)
# ------------------------------
@app.post("/webhook")
async def webhook_handler(request: Request):
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = await request.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, 400

    if "update_id" in data:
        update = Update.de_json(data, telegram_app.bot)
        if not telegram_app.running:
            logger.warning("Telegram Application –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            await init_telegram_app()
        try:
            await telegram_app.process_update(update)
            return {"status": "ok"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, 500
    else:
        return await postback_handler(request)

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = [
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
        [KeyboardButton(text="üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã")],
        [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True, one_time_keyboard=False)
    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    # –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–¥–∞–Ω–æ ‚Äì –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é.
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    headers = {
        "API-KEY": API_KEY,
        "Content-Type": "application/json",
        "User-Agent": "TelegramBot/1.0 (compatible; Alanbase API integration)"
    }
    now = datetime.now()

    if text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        period_keyboard = [
            [KeyboardButton(text="–ó–∞ —á–∞—Å"), KeyboardButton(text="–ó–∞ –¥–µ–Ω—å")],
            [KeyboardButton(text="–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é"), KeyboardButton(text="–ó–∞ –¥–∞—Ç—É")],
            [KeyboardButton(text="–ó–∞ –ø–µ—Ä–∏–æ–¥")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(period_keyboard, resize_keyboard=True, one_time_keyboard=True)
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (–∫–æ–º–∞–Ω–¥–∞ "–ó–∞ –¥–∞—Ç—É")
    if context.user_data.get("awaiting_date"):
        try:
            date_obj = datetime.strptime(text, "%Y-%m-%d").date()
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.")
            return
        period_label = f"–ó–∞ {date_obj.strftime('%Y-%m-%d')}"
        date_str = date_obj.strftime("%Y-%m-%d")
        date_from = f"{date_str} 00:00"
        # –î–ª—è —Ä–µ–∂–∏–º–∞ "–ó–∞ –¥–∞—Ç—É" API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã date_to = date_from
        date_to = date_from
        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            if response.status_code == 200:
                data = response.json()
                message = await format_statistics(data, period_label)
            else:
                message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
        context.user_data["awaiting_date"] = False
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç (–∫–æ–º–∞–Ω–¥–∞ "–ó–∞ –ø–µ—Ä–∏–æ–¥")
    if context.user_data.get("awaiting_period"):
        parts = text.split(",")
        if len(parts) != 2:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD,YYYY-MM-DD")
            return
        try:
            start_date = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
            end_date = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.")
            return
        if start_date > end_date:
            await update.message.reply_text("‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
            return
        total_clicks = 0
        total_unique = 0
        total_confirmed = 0
        total_income = 0.0
        days_count = 0
        current_date = start_date
        while current_date <= end_date:
            d_str = current_date.strftime("%Y-%m-%d")
            date_from = f"{d_str} 00:00"
            # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—é API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã date_to —Å–æ–≤–ø–∞–¥–∞–ª —Å date_from
            date_to = date_from
            params = {
                "group_by": "day",
                "timezone": "Europe/Moscow",
                "date_from": date_from,
                "date_to": date_to,
                "currency_code": "USD"
            }
            try:
                async with httpx.AsyncClient(timeout=10) as client:
                    response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return
            if response.status_code == 200:
                data = response.json()
                if data.get("data"):
                    stat = data["data"][0]
                    total_clicks += int(stat.get("click_count", 0) or 0)
                    total_unique += int(stat.get("click_unique_count", 0) or 0)
                    conv = stat.get("conversions", {})
                    total_confirmed += int(conv.get("confirmed", {}).get("count", 0) or 0)
                    total_income += float(conv.get("confirmed", {}).get("income", 0) or 0)
                    days_count += 1
            current_date += timedelta(days=1)
        if days_count == 0:
            await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            context.user_data["awaiting_period"] = False
            return
        period_label = f"{start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}"
        message = (
            f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})**\n\n"
            f"**–ö–ª–∏–∫–∏:**\n"
            f"‚Ä¢ **–í—Å–µ–≥–æ:** _{total_clicks}_\n"
            f"‚Ä¢ **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ:** _{total_unique}_\n\n"
            f"**–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ):** _{total_confirmed}_\n"
            f"**–î–æ—Ö–æ–¥:** _{total_income:.2f} USD_"
        )
        await update.message.reply_text(message, parse_mode="MarkdownV2")
        context.user_data["awaiting_period"] = False
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    if text == "–ó–∞ —á–∞—Å":
        period_label = "–ó–∞ —á–∞—Å"
        current_hour = now.replace(minute=0, second=0, microsecond=0)
        date_from = current_hour.strftime("%Y-%m-%d %H:%M")
        # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —á–∞—Å—É API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã date_from –∏ date_to —Å–æ–≤–ø–∞–¥–∞–ª–∏
        date_to = date_from
        params = {
            "group_by": "hour",
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            if response.status_code == 200:
                data = response.json()
                message = await format_statistics(data, period_label)
            else:
                message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    
    elif text == "–ó–∞ –¥–µ–Ω—å":
        period_label = "–ó–∞ –¥–µ–Ω—å"
        selected_date = now.strftime("%Y-%m-%d")
        date_from = f"{selected_date} 00:00"
        # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—é API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã date_from == date_to
        date_to = date_from
        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            if response.status_code == 200:
                data = response.json()
                message = await format_statistics(data, period_label)
            else:
                message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    
    elif text == "–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é":
        period_label = "–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å)"
        # –î–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é API –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏
        last_week_start = (now - timedelta(days=now.weekday() + 7)).replace(hour=0, minute=0, second=0, microsecond=0)
        date_from = last_week_start.strftime("%Y-%m-%d %H:%M")
        # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—é API —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã date_from == date_to
        date_to = date_from
        params = {
            "group_by": "day",
            "timezone": "Europe/Moscow",
            "date_from": date_from,
            "date_to": date_to,
            "currency_code": "USD"
        }
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/statistic/common", headers=headers, params=params)
            if response.status_code == 200:
                data = response.json()
                message = await format_statistics(data, period_label)
            else:
                message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    
    elif text == "–ó–∞ –¥–∞—Ç—É":
        await update.message.reply_text("üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        context.user_data["awaiting_date"] = True
    
    elif text == "–ó–∞ –ø–µ—Ä–∏–æ–¥":
        await update.message.reply_text("üóì –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD,YYYY-MM-DD:")
        context.user_data["awaiting_period"] = True
    
    elif text == "üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã":
        params = {
            "is_avaliable": 1,
            "page": 1,
            "per_page": 10
        }
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_API_URL}/partner/offers —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{BASE_API_URL}/partner/offers", headers=headers, params=params)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        except Exception as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {exc}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return
        
        if response.status_code == 200:
            try:
                data = response.json()
                message = await format_offers(data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    elif text == "–ù–∞–∑–∞–¥":
        main_keyboard = [
            [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="üìà –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
        ]
        reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True, one_time_keyboard=False)
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
