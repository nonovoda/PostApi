import os
import logging
import asyncio
from datetime import datetime, timedelta
import httpx

from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
BASE_API_URL = "https://4rabet.api.alanbase.com/v1"
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
# ------------------------------
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton("–õ–ö –ü–ü")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π webhook: Telegram / postback
# ------------------------------
@app.api_route("/webhook", methods=["GET","POST"])
async def webhook_handler(request: Request):
    if request.method == "GET":
        # postback
        data = dict(request.query_params)
        return await process_postback_data(data)

    # POST
    try:
        data = await request.json()
        if "update_id" in data:
            # Telegram update
            update = Update.de_json(data, telegram_app.bot)
            if not telegram_app.running:
                await init_telegram_app()
            await telegram_app.process_update(update)
            return {"status": "ok"}
        else:
            # postback
            return await process_postback_data(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ webhook: {e}")
        return {"status": "ok"}

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# ------------------------------
async def init_telegram_app():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ POSTBACK (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)
# ------------------------------
async def process_postback_data(data: dict):
    logger.debug(f"Postback data: {data}")

    offer_id = data.get("offer_id", "N/A")
    sub_id2 = data.get("sub_id2", "N/A")
    goal = data.get("goal", "N/A")
    revenue = data.get("revenue", "N/A")
    currency = data.get("currency", "USD")
    status = data.get("status", "N/A")
    sub_id4 = data.get("sub_id4", "N/A")
    sub_id5 = data.get("sub_id5", "N/A")
    conversion_date = data.get("conversion_date", "N/A")

    msg = (
        "üîî <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"<b>üìå –û—Ñ—Ñ–µ—Ä:</b> <i>{offer_id}</i>\n"
        f"<b>üõ† –ü–æ–¥—Ö–æ–¥:</b> <i>{sub_id2}</i>\n"
        f"<b>üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{goal}</i>\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å:</b> <i>{status}</i>\n"
        f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{sub_id4}</i>\n"
        f"<b>üéØ –ê–¥—Å–µ—Ç:</b> <i>{sub_id5}</i>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conversion_date}</i>"
    )

    try:
        await telegram_app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–±–µ–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 500

    return {"status": "ok"}

# ------------------------------
# /start
# ------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(update.effective_chat.id, last_id)
        except:
            pass

    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    mk = get_main_menu()
    sent = await update.message.reply_text(text, parse_mode="HTML", reply_markup=mk)
    context.user_data["last_msg_id"] = sent.message_id

# ------------------------------
# –ó–∞–ø—Ä–æ—Å /common
# ------------------------------
async def get_common_data(date_from: str, date_to: str):
    """
    –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å /common, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (ok, data|error)
    """
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/common",
                headers={"API-KEY": API_KEY},
                params={
                    "group_by": "day",
                    "timezone": "Europe/Moscow",
                    "date_from": date_from,
                    "date_to": date_to,
                    "currency_code": "USD"
                }
            )
        if resp.status_code == 200:
            return True, resp.json()
        else:
            return False, f"–û—à–∏–±–∫–∞ /common: {resp.status_code} {resp.text}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /common: {e}"

# ------------------------------
# –ó–∞–ø—Ä–æ—Å /conversions –¥–ª—è 3 –∫–ª—é—á–µ–π (registration, ftd, rdeposit)
# ------------------------------
async def get_reg_ftd_rd(date_from: str, date_to: str):
    """
    –í–µ—Ä–Ω—ë–º —Å–ª–æ–≤–∞—Ä—å: {
      "registration": <count>,
      "ftd": <count>,
      "rdeposit": <count>
    }
    """
    base_params = [
        ("timezone", "Europe/Moscow"),
        ("date_from", date_from),
        ("date_to", date_to),
        ("per_page", "500"),
    ]
    # –î–ª—è bet? –í—ã –Ω–µ —É–ø–æ–º—è–Ω—É–ª–∏ bet –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Å—á–∏—Ç–∞–µ–º.
    for g in ["registration", "ftd", "rdeposit"]:
        base_params.append(("goal_keys[]", g))

    out = {"registration":0, "ftd":0, "rdeposit":0}

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(
                f"{BASE_API_URL}/partner/statistic/conversions",
                headers={"API-KEY": API_KEY},
                params=base_params
            )
        if resp.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ /conversions: {resp.status_code} {resp.text}"
        arr = resp.json().get("data", [])
        for c in arr:
            goal_key = c.get("goal",{}).get("key","")
            if goal_key in out:
                out[goal_key]+=1
        return True, out
    except Exception as e:
        return False, str(e)

# ------------------------------
# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ------------------------------
def build_final_message(
    period_label: str,
    date_info: str,
    clicks: int,
    unique_clicks: int,
    reg_count: int,
    ftd_count: int,
    rd_count: int,
    conf_count: int,
    conf_payout: float,
    metrics_text: str = ""
) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –º–µ—Ç—Ä–∏–∫).
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å metrics_text –≤–Ω–∏–∑—É.
    """
    msg = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ({period_label})\n\n"
        f"üóì <b>–ü–µ—Ä–∏–æ–¥:</b> <i>{date_info}</i>\n\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> <i>{clicks}</i> (—É–Ω–∏–∫: {unique_clicks})\n"
        f"üÜï <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <i>{reg_count}</i>\n"
        f"üíµ <b>FTD:</b> <i>{ftd_count}</i>\n"
        f"üîÑ <b>RD:</b> <i>{rd_count}</i>\n\n"
        f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{conf_count}</i>\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> <i>{conf_payout} USD</i>\n"
    )
    if metrics_text:
        # –î–æ–±–∞–≤–∏–º –±–ª–æ–∫ –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Ü–µ
        msg += f"\n{metrics_text}\n"
    return msg

def build_metrics_text(
    clicks: int,
    unique_clicks: int,
    reg_count: int,
    ftd_count: int,
    rd_count: int
) -> str:
    """
    –ú–µ—Ç—Ä–∏–∫–∏:
     C2R = (—Ä–µ–≥ / –∫–ª–∏–∫–∏)*100%
     R2D = (ftd / —Ä–µ–≥)*100%
     C2D = (ftd / –∫–ª–∏–∫–∏)*100%
     EPC = ftd / –∫–ª–∏–∫–∏
     uEPC = ftd / —É–Ω–∏–∫. –∫–ª–∏–∫–∏
     –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = (ftd + rd) / ftd
    """
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    c2r = (reg_count/clicks*100) if clicks>0 else 0
    r2d = (ftd_count/reg_count*100) if reg_count>0 else 0
    c2d = (ftd_count/clicks*100) if clicks>0 else 0
    epc = ftd_count/clicks if clicks>0 else 0
    uepc = ftd_count/unique_clicks if unique_clicks>0 else 0

    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ä–µ—á—å –æ –∫–æ–ª-–≤–µ, —Ä–∞–∑ —É–∂ FTD + RD ‚Äî count):
    avg_check = (ftd_count + rd_count)/ftd_count if ftd_count>0 else 0

    # –û—Ñ–æ—Ä–º–∏–º –∫—Ä–∞—Å–∏–≤–æ, –¥–æ–±–∞–≤–∏–º —ç–º–æ–¥–∑–∏
    text = (
        "üéØ <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n\n"
        f"‚Ä¢ <b>C2R</b> = {c2r:.2f}%\n"
        f"‚Ä¢ <b>R2D</b> = {r2d:.2f}%\n"
        f"‚Ä¢ <b>C2D</b> = {c2d:.2f}%\n\n"
        f"‚Ä¢ <b>EPC</b> = {epc:.3f}\n"
        f"‚Ä¢ <b>uEPC</b> = {uepc:.3f}\n\n"
        f"‚Ä¢ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</b> = {avg_check:.2f}\n"
    )
    return text

# ------------------------------
# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ inline-–∫–Ω–æ–ø–æ–∫
# ------------------------------
async def inline_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_mainmenu":
        # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏, –ø–∏—à–µ–º "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode="HTML")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        mk = get_main_menu()
        sent = await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = sent.message_id
        return

    # -------------- –ì–æ—Ç–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã --------------
    if data in ["period_today","period_7days","period_month"]:
        # –û–ø—Ä–µ–¥–µ–ª–∏–º date_from/date_to
        if data == "period_today":
            d_str = datetime.now().strftime("%Y-%m-%d")
            date_from = f"{d_str} 00:00"
            date_to   = f"{d_str} 23:59"
            label = "–°–µ–≥–æ–¥–Ω—è"
        elif data == "period_7days":
            end_d = datetime.now().date()
            start_d = end_d - timedelta(days=6)
            date_from = f"{start_d} 00:00"
            date_to   = f"{end_d} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        else: # period_month
            end_d = datetime.now().date()
            start_d = end_d - timedelta(days=30)
            date_from = f"{start_d} 00:00"
            date_to   = f"{end_d} 23:59"
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        await show_stats_unified(query, context, date_from, date_to, label)
        return

    # -------------- –°–≤–æ–π –ø–µ—Ä–∏–æ–¥ --------------
    if data == "period_custom":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã
        txt = (
            "üóì <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD,YYYY-MM-DD</code>.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-02-01,2025-02-10\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await query.edit_message_text(txt, parse_mode="HTML")
        context.user_data["awaiting_custom_period"] = True
        context.user_data["inline_msg_id"] = query.message.message_id
        return

    # -------------- –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ --------------
    if data.startswith("metrics|"):
        # data: "metrics|date_from|date_to|label|reg|ftd|rd|clicks|unique"
        parts = data.split("|")
        date_from = parts[1]
        date_to   = parts[2]
        label     = parts[3]
        reg_count = int(parts[4])
        ftd_count = int(parts[5])
        rd_count  = int(parts[6])
        clicks    = int(parts[7])
        unique_clicks = int(parts[8])

        # –°—Ç—Ä–æ–∏–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_str = build_metrics_text(
            clicks, unique_clicks, reg_count, ftd_count, rd_count
        )

        # –ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å info).
        # –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ info –ø—Ä–∏ show_stats_unified -> context.user_data?
        # –ù–æ –ø—Ä–æ—â–µ: context.user_data["stats_msg"]. –õ–∏–±–æ ‚Äî
        # –ú–æ–∂–Ω–æ –±—ã–ª–æ –≤—Å—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ. –ù–æ —É–¥–æ–±–Ω–µ–µ —Ö—Ä–∞–Ω–∏—Ç—å, –∫–∞–∫ last version.

        stored_msg = context.user_data.get("last_stats_msg", "")  # —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ—Ç—Ä–∏–∫
        final_msg = stored_msg + f"\n{metrics_str}"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" => show_stats_unified (–±–µ–∑ –º–µ—Ç—Ä–∏–∫)
        # callback_data="back_nometric|..."
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "–°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                    callback_data=f"back_nometric|{date_from}|{date_to}|{label}|{reg_count}|{ftd_count}|{rd_count}|{clicks}|{unique_clicks}"
                )
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])

        await query.edit_message_text(final_msg, parse_mode="HTML", reply_markup=kb)
        return

    # -------------- –°–∫—Ä—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ --------------
    if data.startswith("back_nometric|"):
        # back_nometric|date_from|date_to|label|reg|ftd|rd|clicks|unique
        parts = data.split("|")
        date_from = parts[1]
        date_to   = parts[2]
        label     = parts[3]
        reg_count = int(parts[4])
        ftd_count = int(parts[5])
        rd_count  = int(parts[6])
        clicks    = int(parts[7])
        unique_clicks = int(parts[8])

        # –°–Ω–æ–≤–∞ —Å—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ—Ç—Ä–∏–∫
        # –ù–æ context.user_data["last_stats_msg"] —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ
        msg_nometric = context.user_data.get("last_stats_msg", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                    callback_data=f"metrics|{date_from}|{date_to}|{label}|{reg_count}|{ftd_count}|{rd_count}|{clicks}|{unique_clicks}"
                )
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        await query.edit_message_text(msg_nometric, parse_mode="HTML", reply_markup=kb)
        return

    # –ò–Ω–∞—á–µ
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML")

# ------------------------------
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ï–î–ò–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É + –∫–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
# ------------------------------
async def show_stats_unified(query, context, date_from, date_to, label):
    """
    1) /common => –∫–ª–∏–∫–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ, payout
    2) /conversions => registration, ftd, rdeposit
    3) –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç
    4) Inline-–∫–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
    """
    ok_c, data_c = await get_common_data(date_from, date_to)
    if not ok_c:
        text = f"‚ùó {data_c}"
        # –Ω–∞–∑–∞–¥
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
        ])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return

    # –ü–∞—Ä—Å–∏–º /common
    st = data_c.get("data",[{}])[0]
    gf = st.get("group_fields",[])
    date_info = gf[0].get("label") if gf else "N/A"
    clicks = st.get("click_count", 0)
    unique_clicks = st.get("click_unique_count", 0)
    conf = st.get("conversions",{}).get("confirmed", {})
    conf_count = conf.get("count", 0)
    conf_payout = conf.get("payout", 0)

    # –ó–∞–ø—Ä–æ—Å /conversions => registration, ftd, rdeposit
    ok_r, data_r = await get_reg_ftd_rd(date_from, date_to)
    if not ok_r:
        # –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã /common
        text = f"‚ùó {data_r}"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")]
        ])
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
        return

    reg_count = data_r["registration"]
    ftd_count = data_r["ftd"]
    rd_count  = data_r["rdeposit"]

    # –°—Ç—Ä–æ–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    final_msg = build_final_message(
        period_label=label,
        date_info=date_info,
        clicks=clicks,
        unique_clicks=unique_clicks,
        reg_count=reg_count,
        ftd_count=ftd_count,
        rd_count=rd_count,
        conf_count=conf_count,
        conf_payout=conf_payout,
        metrics_text=""
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data, —á—Ç–æ–±—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ "–ø—Ä–∏–ª–µ–ø–∏—Ç—å" –∫ –Ω–µ–º—É
    context.user_data["last_stats_msg"] = final_msg

    # –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏" => "metrics|date_from|date_to|label|reg|ftd|rd|clicks|unique"
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                callback_data=f"metrics|{date_from}|{date_to}|{label}|{reg_count}|{ftd_count}|{rd_count}|{clicks}|{unique_clicks}"
            )
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
        ]
    ])
    await query.edit_message_text(final_msg, parse_mode="HTML", reply_markup=kb)

# ------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤—Ä—É—á–Ω—É—é
# ------------------------------
async def text_handler_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥" –∏ –±–æ—Ç –∂–¥—ë—Ç "YYYY-MM-DD,YYYY-MM-DD"
    """
    if context.user_data.get("awaiting_custom_period"):
        text = update.message.text.strip()
        if text.lower() == "–Ω–∞–∑–∞–¥":
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            context.user_data["awaiting_custom_period"] = False
            inline_msg_id = context.user_data.get("inline_msg_id", None)
            if inline_msg_id:
                kb = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                        InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                        InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
                    ],
                    [
                        InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
                    ],
                    [
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
                    ]
                ])
                await update.message.delete()
                try:
                    await context.bot.edit_message_text(
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                        chat_id=update.effective_chat.id,
                        message_id=inline_msg_id,
                        parse_mode="HTML",
                        reply_markup=kb
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
            return

        # –ü–∞—Ä—Å–∏–º
        parts = text.split(",")
        if len(parts) != 2:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –§–æ—Ä–º–∞—Ç: YYYY-MM-DD,YYYY-MM-DD –∏–ª–∏ '–ù–∞–∑–∞–¥'."
            )
            return

        try:
            start_d = datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
            end_d   = datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        except:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ '–ù–∞–∑–∞–¥'."
            )
            return

        if start_d > end_d:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùó –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π."
            )
            return

        context.user_data["awaiting_custom_period"] = False
        inline_msg_id = context.user_data["inline_msg_id"]
        await update.message.delete()

        date_from = f"{start_d} 00:00"
        date_to   = f"{end_d} 23:59"
        label = f"{start_d} - {end_d}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        # –ù—É–∂–Ω–æ edit_message_text(inline_msg_id)
        # –∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ show_stats_unified
        # –ù–æ –º—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º callbackQueryHandler. –ü—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é:
        class FakeQuery:
            def __init__(self, message_id, chat_id):
                self.message = type("Msg", (), {})()
                self.message.message_id = message_id
                self.message.chat_id = chat_id
            async def edit_message_text(self, *args, **kwargs):
                return await context.bot.edit_message_text(
                    chat_id=self.message.chat_id,
                    message_id=self.message.message_id,
                    *args, **kwargs
                )
            async def answer(self):
                pass

        fake_query = FakeQuery(inline_msg_id, update.effective_chat.id)
        await show_stats_unified(fake_query, context, date_from, date_to, label)

    else:
        # –î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π
        pass

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ Reply-–∫–Ω–æ–ø–æ–∫ (–õ–ö –ü–ü / –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É / –ù–∞–∑–∞–¥)
# ------------------------------
async def reply_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await asyncio.sleep(1)
    try:
        await update.message.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await asyncio.sleep(1)
    last_id = context.user_data.get("last_msg_id")
    if last_id:
        try:
            await context.bot.delete_message(update.effective_chat.id, last_id)
        except:
            pass

    text = update.message.text.strip()

    if text == "–õ–ö –ü–ü":
        link = "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞: https://cabinet.4rabetpartner.com/statistics"
        sent = await update.message.reply_text(link, parse_mode="HTML", reply_markup=get_main_menu())
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        # –í—ã—Å—ã–ª–∞–µ–º inline-–º–µ–Ω—é
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="period_7days"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")
            ],
            [
                InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_mainmenu")
            ]
        ])
        sent = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", parse_mode="HTML", reply_markup=kb)
        context.user_data["last_msg_id"] = sent.message_id
        return

    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        mk = get_main_menu()
        msg = await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="HTML", reply_markup=mk)
        context.user_data["last_msg_id"] = msg.message_id
        return

    # –ò–Ω–∞—á–µ
    msg = await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", parse_mode="HTML", reply_markup=get_main_menu())
    context.user_data["last_msg_id"] = msg.message_id

# ------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------
telegram_app.add_handler(CommandHandler("start", start_command))
# 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–∏–æ–¥
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler_dates), group=1)
# 2) –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–µ Reply-–∫–Ω–æ–ø–∫–∏
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_button_handler), group=2)
# 3) –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
telegram_app.add_handler(CallbackQueryHandler(inline_button_handler))

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ------------------------------
if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(init_telegram_app())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
