import os
import logging
import asyncio
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/api/v1"
WEBHOOK_URL = "https://apiposts-production-1dea.up.railway.app/webhook"
PORT = int(os.getenv("PORT", 5000))

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
application = Application.builder().token(TELEGRAM_TOKEN).build()

async def init_application():
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# ------------------------------
# FastAPI —Å–µ—Ä–≤–µ—Ä
# ------------------------------
app = FastAPI()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app.post("/postback")
async def postback(request: Request):
    data = await request.json()
    logger.info("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ /postback: %s", data)
    
    if not data or data.get("api_key") != API_KEY:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}

    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )
    await application.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message_text)
    return {"status": "success"}

# ------------------------------
# Telegram Bot Handlers
# ------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}],
        [{"text": "–ö–æ–Ω–≤–µ—Ä—Å–∏–∏", "callback_data": "conversions"}],
        [{"text": "–û—Ñ—Ñ–µ—Ä—ã", "callback_data": "offers"}],
        [{"text": "–¢–µ—Å—Ç", "callback_data": "test"}],
    ]
    reply_markup = {"inline_keyboard": keyboard}
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    text = ""

    if command == "stats":
        text = "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    elif command == "conversions":
        text = "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    elif command == "offers":
        text = "–ó–∞–ø—Ä–æ—Å –æ—Ñ—Ñ–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    elif command == "test":
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    await query.edit_message_text(text=text)

# ------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
# ------------------------------
async def main():
    await init_application()
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")

if __name__ == "__main__":
    import uvicorn

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
