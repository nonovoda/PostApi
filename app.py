import os
import logging
import requests
from threading import Thread
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "5KH7dec1ptNTRmGVBLB1gmKXMz0EToJmLjUzO9mi7LYiON2S1Ri4n2166yqmcX2o")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7643560524:AAGX9QB8C-STpWKxC0bqWFqzFIu0WmN8ses")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "802154146")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
# ------------------------------
app = Flask(__name__)

@app.route('/postback', methods=['GET', 'POST'])
def postback():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (POST/GET),
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API –∫–ª—é—á –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (JSON, form –∏–ª–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    if request.method == 'POST':
        data = request.get_json() or request.form
    else:
        data = request.args

    if not data:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not data.get('api_key'):
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω API –∫–ª—é—á"}), 400
    if data.get('api_key') != API_KEY:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"}), 403

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown"
    }
    response = requests.post(telegram_url, json=payload)

    if response.status_code == 200:
        return jsonify({"status": "success"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"}), 500

@app.route('/test', methods=['GET'])
def test():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    test_message = (
        "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram Postback Bot."
    )
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": test_message,
        "parse_mode": "Markdown"
    }
    response = requests.post(telegram_url, json=payload)
    if response.status_code == 200:
        return jsonify({"status": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", "response": response.text}), 500

@app.route('/stats', methods=['GET'])
def stats():
    """
    Endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ü–ü –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—ë –≤ Telegram.
    """
    pp_stats_url = "https://cabinet.4rabetpartner.com/api/partner/stats"
    headers = {"Authorization": f"Bearer {API_KEY}"}
    response = requests.get(pp_stats_url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ü:*\n"
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversions', 'N/A')}\n"
            f"–î–æ—Ö–æ–¥: {data.get('revenue', 'N/A')}\n"
            f"–ë–∞–ª–∞–Ω—Å: {data.get('balance', 'N/A')}\n"
        )
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": stats_message,
            "parse_mode": "Markdown"
        }
        tg_response = requests.post(telegram_url, json=payload)
        if tg_response.status_code == 200:
            return jsonify({"status": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}), 200
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram"}), 500
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ü–ü", "details": response.text}), 500

@app.route('/balance', methods=['GET'])
def balance():
    """
    Endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ü–ü.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ JSON.
    """
    pp_balance_url = "https://cabinet.4rabetpartner.com/api/partner/balance"
    headers = {"Authorization": f"Bearer {API_KEY}"}
    response = requests.get(pp_balance_url, headers=headers)
    try:
        data = response.json()
    except requests.exceptions.JSONDecodeError:
        return jsonify({
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API, JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω",
            "raw_response": response.text
        }), 500

    current_balance = data.get("balance", "N/A")
    message_text = (
        "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:*\n"
        f"–ë–∞–ª–∞–Ω—Å: {current_balance}\n"
    )
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown"
    }
    tg_response = requests.post(telegram_url, json=payload)
    if tg_response.status_code == 200:
        return jsonify({"status": "–ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}), 200
    else:
        return jsonify({
            "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ Telegram",
            "details": tg_response.text
        }), 500

# ------------------------------
# Telegram Bot —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
# ------------------------------
def start(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
    """
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ü–ü.
    """
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    command = query.data
    text = ""
    
    if command == 'stats':
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.get("https://cabinet.4rabetpartner.com/api/partner/stats", headers=headers)
        if response.status_code == 200:
            data = response.json()
            text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ü:*\n"
                f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversions', 'N/A')}\n"
                f"–î–æ—Ö–æ–¥: {data.get('revenue', 'N/A')}\n"
                f"–ë–∞–ª–∞–Ω—Å: {data.get('balance', 'N/A')}\n"
            )
        else:
            text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}"
    elif command == 'balance':
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.get("https://cabinet.4rabetpartner.com/api/partner/balance", headers=headers)
        try:
            data = response.json()
        except requests.exceptions.JSONDecodeError:
            text = f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {response.text}"
        else:
            text = (
                "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:*\n"
                f"–ë–∞–ª–∞–Ω—Å: {data.get('balance', 'N/A')}\n"
            )
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
    
    query.edit_message_text(text=text, parse_mode='Markdown')

def run_telegram_bot():
    """
    –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling.
    """
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    updater.start_polling()
    updater.idle()

# ------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------
def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º Flask –∏ Telegram-–±–æ—Ç–∞
# ------------------------------
if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    telegram_thread = Thread(target=run_telegram_bot)
    flask_thread.start()
    telegram_thread.start()
    flask_thread.join()
    telegram_thread.join()
