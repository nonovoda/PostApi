import os
import logging
import requests
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------
API_KEY = os.getenv("PP_API_KEY", "–í–ê–®_API_–ö–õ–Æ–ß")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "–í–ê–®_CHAT_ID")
BASE_API_URL = "https://api.alanbase.com/api/v1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://apiposts-production-6a11.up.railway.app")
PORT = int(os.getenv("PORT", 5000))

API_HEADERS = {
    "API-KEY": API_KEY,
    "Content-Type": "application/json",
    "User-Agent": "AlanbaseTelegramBot/1.0"
}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
# ------------------------------
application = Application.builder().token(TELEGRAM_TOKEN).build()

# ------------------------------
# Flask API
# ------------------------------
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(), application.bot)
    application.create_task(application.process_update(update))
    return jsonify({"status": "success"}), 200

@app.route("/postback", methods=["POST"])
def postback():
    data = request.get_json()
    logger.info("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ /postback: %s", data)
    if not data or data.get("api_key") != API_KEY:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}), 403

    message_text = (
        "–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!\n"
        f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
        f"üõ† –ü–æ–¥—Ö–æ–¥: {data.get('sub_id_2', 'N/A')}\n"
        f"üìä –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('goal', 'N/A')}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('status', 'N/A')}\n"
        f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {data.get('sub_id_4', 'N/A')}\n"
        f"üéØ –ê–¥—Å–µ—Ç: {data.get('sub_id_5', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data.get('conversion_date', 'N/A')}\n"
    )
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message_text}
    requests.post(telegram_url, json=payload)
    return jsonify({"status": "success"}), 200

# ------------------------------
# Telegram Bot Handlers
# ------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Å–∏–∏", callback_data='conversions')],
        [InlineKeyboardButton("–û—Ñ—Ñ–µ—Ä—ã", callback_data='offers')],
        [InlineKeyboardButton("–¢–µ—Å—Ç", callback_data='test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    text = ""
    if command == 'stats':
        text = "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    elif command == 'conversions':
        text = await get_conversions()
    elif command == 'offers':
        text = await get_offers()
    elif command == 'test':
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
    await query.edit_message_text(text=text)

# ------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
# ------------------------------
async def set_webhook():
    webhook_url = f"{WEBHOOK_URL}/webhook"
    await application.bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_webhook())
    app.run(host="0.0.0.0", port=PORT)
